
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model drinks
 */

export type drinks = {
  id: number
  name: string
  category_id: number
  description: string
  is_new: boolean
  created_at: Date | null
}

/**
 * Model categories
 */

export type categories = {
  id: number
  name: string
  description: string
  created_at: Date | null
}

/**
 * Model images
 */

export type images = {
  id: number
  image_url: string
  image_id: number
  created_at: Date | null
}

/**
 * Model allergies
 */

export type allergies = {
  id: number
  allergy: string
  created_at: Date | null
}

/**
 * Model drinks_allergies
 */

export type drinks_allergies = {
  id: number
  drink_id: number
  allergy_id: number
  created_at: Date | null
}

/**
 * Model nutritions
 */

export type nutritions = {
  id: number
  calories: string
  sodium: string
  fat: string
  sugar: string
  protein: string
  caffein: string
  nutrition_id: number
  created_at: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Drinks
 * const drinks = await prisma.drinks.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Drinks
   * const drinks = await prisma.drinks.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.drinks`: Exposes CRUD operations for the **drinks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drinks
    * const drinks = await prisma.drinks.findMany()
    * ```
    */
  get drinks(): Prisma.drinksDelegate<GlobalReject>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<GlobalReject>;

  /**
   * `prisma.images`: Exposes CRUD operations for the **images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.images.findMany()
    * ```
    */
  get images(): Prisma.imagesDelegate<GlobalReject>;

  /**
   * `prisma.allergies`: Exposes CRUD operations for the **allergies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergies
    * const allergies = await prisma.allergies.findMany()
    * ```
    */
  get allergies(): Prisma.allergiesDelegate<GlobalReject>;

  /**
   * `prisma.drinks_allergies`: Exposes CRUD operations for the **drinks_allergies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drinks_allergies
    * const drinks_allergies = await prisma.drinks_allergies.findMany()
    * ```
    */
  get drinks_allergies(): Prisma.drinks_allergiesDelegate<GlobalReject>;

  /**
   * `prisma.nutritions`: Exposes CRUD operations for the **nutritions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nutritions
    * const nutritions = await prisma.nutritions.findMany()
    * ```
    */
  get nutritions(): Prisma.nutritionsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.25.0
   * Query Engine version: c838e79f39885bc8e1611849b1eb28b5bb5bc922
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    drinks: 'drinks',
    categories: 'categories',
    images: 'images',
    allergies: 'allergies',
    drinks_allergies: 'drinks_allergies',
    nutritions: 'nutritions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model drinks
   */


  export type AggregateDrinks = {
    _count: DrinksCountAggregateOutputType | null
    count: DrinksCountAggregateOutputType | null
    _avg: DrinksAvgAggregateOutputType | null
    avg: DrinksAvgAggregateOutputType | null
    _sum: DrinksSumAggregateOutputType | null
    sum: DrinksSumAggregateOutputType | null
    _min: DrinksMinAggregateOutputType | null
    min: DrinksMinAggregateOutputType | null
    _max: DrinksMaxAggregateOutputType | null
    max: DrinksMaxAggregateOutputType | null
  }

  export type DrinksAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type DrinksSumAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type DrinksMinAggregateOutputType = {
    id: number | null
    name: string | null
    category_id: number | null
    description: string | null
    is_new: boolean | null
    created_at: Date | null
  }

  export type DrinksMaxAggregateOutputType = {
    id: number | null
    name: string | null
    category_id: number | null
    description: string | null
    is_new: boolean | null
    created_at: Date | null
  }

  export type DrinksCountAggregateOutputType = {
    id: number
    name: number
    category_id: number
    description: number
    is_new: number
    created_at: number
    _all: number
  }


  export type DrinksAvgAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type DrinksSumAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type DrinksMinAggregateInputType = {
    id?: true
    name?: true
    category_id?: true
    description?: true
    is_new?: true
    created_at?: true
  }

  export type DrinksMaxAggregateInputType = {
    id?: true
    name?: true
    category_id?: true
    description?: true
    is_new?: true
    created_at?: true
  }

  export type DrinksCountAggregateInputType = {
    id?: true
    name?: true
    category_id?: true
    description?: true
    is_new?: true
    created_at?: true
    _all?: true
  }

  export type DrinksAggregateArgs = {
    /**
     * Filter which drinks to aggregate.
     * 
    **/
    where?: drinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drinks to fetch.
     * 
    **/
    orderBy?: Enumerable<drinksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: drinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drinks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drinks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned drinks
    **/
    _count?: true | DrinksCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | DrinksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DrinksAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: DrinksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DrinksSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: DrinksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DrinksMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: DrinksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DrinksMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: DrinksMaxAggregateInputType
  }

  export type GetDrinksAggregateType<T extends DrinksAggregateArgs> = {
        [P in keyof T & keyof AggregateDrinks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrinks[P]>
      : GetScalarType<T[P], AggregateDrinks[P]>
  }


    
    
  export type DrinksGroupByArgs = {
    where?: drinksWhereInput
    orderBy?: Enumerable<drinksOrderByInput>
    by: Array<DrinksScalarFieldEnum>
    having?: drinksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DrinksCountAggregateInputType | true
    _avg?: DrinksAvgAggregateInputType
    _sum?: DrinksSumAggregateInputType
    _min?: DrinksMinAggregateInputType
    _max?: DrinksMaxAggregateInputType
  }


  export type DrinksGroupByOutputType = {
    id: number
    name: string
    category_id: number
    description: string
    is_new: boolean
    created_at: Date | null
    _count: DrinksCountAggregateOutputType | null
    _avg: DrinksAvgAggregateOutputType | null
    _sum: DrinksSumAggregateOutputType | null
    _min: DrinksMinAggregateOutputType | null
    _max: DrinksMaxAggregateOutputType | null
  }

  type GetDrinksGroupByPayload<T extends DrinksGroupByArgs> = Promise<
    Array<
      PickArray<DrinksGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DrinksGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DrinksGroupByOutputType[P]> 
            : GetScalarType<T[P], DrinksGroupByOutputType[P]>
        }
      > 
    >


  export type drinksSelect = {
    id?: boolean
    name?: boolean
    category_id?: boolean
    description?: boolean
    is_new?: boolean
    created_at?: boolean
    categories?: boolean | categoriesArgs
    images?: boolean | imagesFindManyArgs
    drinks_allergies?: boolean | drinks_allergiesFindManyArgs
    nutritions?: boolean | nutritionsFindManyArgs
  }

  export type drinksInclude = {
    categories?: boolean | categoriesArgs
    images?: boolean | imagesFindManyArgs
    drinks_allergies?: boolean | drinks_allergiesFindManyArgs
    nutritions?: boolean | nutritionsFindManyArgs
  }

  export type drinksGetPayload<
    S extends boolean | null | undefined | drinksArgs,
    U = keyof S
      > = S extends true
        ? drinks
    : S extends undefined
    ? never
    : S extends drinksArgs | drinksFindManyArgs
    ?'include' extends U
    ? drinks  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'categories'
        ? categoriesGetPayload<S['include'][P]> :
        P extends 'images'
        ? Array < imagesGetPayload<S['include'][P]>>  :
        P extends 'drinks_allergies'
        ? Array < drinks_allergiesGetPayload<S['include'][P]>>  :
        P extends 'nutritions'
        ? Array < nutritionsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof drinks ?drinks [P]
  : 
          P extends 'categories'
        ? categoriesGetPayload<S['select'][P]> :
        P extends 'images'
        ? Array < imagesGetPayload<S['select'][P]>>  :
        P extends 'drinks_allergies'
        ? Array < drinks_allergiesGetPayload<S['select'][P]>>  :
        P extends 'nutritions'
        ? Array < nutritionsGetPayload<S['select'][P]>>  : never
  } 
    : drinks
  : drinks


  type drinksCountArgs = Merge<
    Omit<drinksFindManyArgs, 'select' | 'include'> & {
      select?: DrinksCountAggregateInputType | true
    }
  >

  export interface drinksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Drinks that matches the filter.
     * @param {drinksFindUniqueArgs} args - Arguments to find a Drinks
     * @example
     * // Get one Drinks
     * const drinks = await prisma.drinks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends drinksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, drinksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'drinks'> extends True ? CheckSelect<T, Prisma__drinksClient<drinks>, Prisma__drinksClient<drinksGetPayload<T>>> : CheckSelect<T, Prisma__drinksClient<drinks | null >, Prisma__drinksClient<drinksGetPayload<T> | null >>

    /**
     * Find the first Drinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinksFindFirstArgs} args - Arguments to find a Drinks
     * @example
     * // Get one Drinks
     * const drinks = await prisma.drinks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends drinksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, drinksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'drinks'> extends True ? CheckSelect<T, Prisma__drinksClient<drinks>, Prisma__drinksClient<drinksGetPayload<T>>> : CheckSelect<T, Prisma__drinksClient<drinks | null >, Prisma__drinksClient<drinksGetPayload<T> | null >>

    /**
     * Find zero or more Drinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drinks
     * const drinks = await prisma.drinks.findMany()
     * 
     * // Get first 10 Drinks
     * const drinks = await prisma.drinks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const drinksWithIdOnly = await prisma.drinks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends drinksFindManyArgs>(
      args?: SelectSubset<T, drinksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<drinks>>, PrismaPromise<Array<drinksGetPayload<T>>>>

    /**
     * Create a Drinks.
     * @param {drinksCreateArgs} args - Arguments to create a Drinks.
     * @example
     * // Create one Drinks
     * const Drinks = await prisma.drinks.create({
     *   data: {
     *     // ... data to create a Drinks
     *   }
     * })
     * 
    **/
    create<T extends drinksCreateArgs>(
      args: SelectSubset<T, drinksCreateArgs>
    ): CheckSelect<T, Prisma__drinksClient<drinks>, Prisma__drinksClient<drinksGetPayload<T>>>

    /**
     * Create many Drinks.
     *     @param {drinksCreateManyArgs} args - Arguments to create many Drinks.
     *     @example
     *     // Create many Drinks
     *     const drinks = await prisma.drinks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends drinksCreateManyArgs>(
      args?: SelectSubset<T, drinksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Drinks.
     * @param {drinksDeleteArgs} args - Arguments to delete one Drinks.
     * @example
     * // Delete one Drinks
     * const Drinks = await prisma.drinks.delete({
     *   where: {
     *     // ... filter to delete one Drinks
     *   }
     * })
     * 
    **/
    delete<T extends drinksDeleteArgs>(
      args: SelectSubset<T, drinksDeleteArgs>
    ): CheckSelect<T, Prisma__drinksClient<drinks>, Prisma__drinksClient<drinksGetPayload<T>>>

    /**
     * Update one Drinks.
     * @param {drinksUpdateArgs} args - Arguments to update one Drinks.
     * @example
     * // Update one Drinks
     * const drinks = await prisma.drinks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends drinksUpdateArgs>(
      args: SelectSubset<T, drinksUpdateArgs>
    ): CheckSelect<T, Prisma__drinksClient<drinks>, Prisma__drinksClient<drinksGetPayload<T>>>

    /**
     * Delete zero or more Drinks.
     * @param {drinksDeleteManyArgs} args - Arguments to filter Drinks to delete.
     * @example
     * // Delete a few Drinks
     * const { count } = await prisma.drinks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends drinksDeleteManyArgs>(
      args?: SelectSubset<T, drinksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drinks
     * const drinks = await prisma.drinks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends drinksUpdateManyArgs>(
      args: SelectSubset<T, drinksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Drinks.
     * @param {drinksUpsertArgs} args - Arguments to update or create a Drinks.
     * @example
     * // Update or create a Drinks
     * const drinks = await prisma.drinks.upsert({
     *   create: {
     *     // ... data to create a Drinks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Drinks we want to update
     *   }
     * })
    **/
    upsert<T extends drinksUpsertArgs>(
      args: SelectSubset<T, drinksUpsertArgs>
    ): CheckSelect<T, Prisma__drinksClient<drinks>, Prisma__drinksClient<drinksGetPayload<T>>>

    /**
     * Count the number of Drinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinksCountArgs} args - Arguments to filter Drinks to count.
     * @example
     * // Count the number of Drinks
     * const count = await prisma.drinks.count({
     *   where: {
     *     // ... the filter for the Drinks we want to count
     *   }
     * })
    **/
    count<T extends drinksCountArgs>(
      args?: Subset<T, drinksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DrinksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Drinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrinksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DrinksAggregateArgs>(args: Subset<T, DrinksAggregateArgs>): PrismaPromise<GetDrinksAggregateType<T>>

    /**
     * Group by Drinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrinksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DrinksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DrinksGroupByArgs['orderBy'] }
        : { orderBy?: DrinksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DrinksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrinksGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for drinks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__drinksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends categoriesArgs = {}>(args?: Subset<T, categoriesArgs>): CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>;

    images<T extends imagesFindManyArgs = {}>(args?: Subset<T, imagesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<images>>, PrismaPromise<Array<imagesGetPayload<T>>>>;

    drinks_allergies<T extends drinks_allergiesFindManyArgs = {}>(args?: Subset<T, drinks_allergiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<drinks_allergies>>, PrismaPromise<Array<drinks_allergiesGetPayload<T>>>>;

    nutritions<T extends nutritionsFindManyArgs = {}>(args?: Subset<T, nutritionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<nutritions>>, PrismaPromise<Array<nutritionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * drinks findUnique
   */
  export type drinksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * Throw an Error if a drinks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which drinks to fetch.
     * 
    **/
    where: drinksWhereUniqueInput
  }


  /**
   * drinks findFirst
   */
  export type drinksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * Throw an Error if a drinks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which drinks to fetch.
     * 
    **/
    where?: drinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drinks to fetch.
     * 
    **/
    orderBy?: Enumerable<drinksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for drinks.
     * 
    **/
    cursor?: drinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drinks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drinks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of drinks.
     * 
    **/
    distinct?: Enumerable<DrinksScalarFieldEnum>
  }


  /**
   * drinks findMany
   */
  export type drinksFindManyArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * Filter, which drinks to fetch.
     * 
    **/
    where?: drinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drinks to fetch.
     * 
    **/
    orderBy?: Enumerable<drinksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing drinks.
     * 
    **/
    cursor?: drinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drinks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drinks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DrinksScalarFieldEnum>
  }


  /**
   * drinks create
   */
  export type drinksCreateArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * The data needed to create a drinks.
     * 
    **/
    data: XOR<drinksCreateInput, drinksUncheckedCreateInput>
  }


  /**
   * drinks createMany
   */
  export type drinksCreateManyArgs = {
    data: Enumerable<drinksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * drinks update
   */
  export type drinksUpdateArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * The data needed to update a drinks.
     * 
    **/
    data: XOR<drinksUpdateInput, drinksUncheckedUpdateInput>
    /**
     * Choose, which drinks to update.
     * 
    **/
    where: drinksWhereUniqueInput
  }


  /**
   * drinks updateMany
   */
  export type drinksUpdateManyArgs = {
    data: XOR<drinksUpdateManyMutationInput, drinksUncheckedUpdateManyInput>
    where?: drinksWhereInput
  }


  /**
   * drinks upsert
   */
  export type drinksUpsertArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * The filter to search for the drinks to update in case it exists.
     * 
    **/
    where: drinksWhereUniqueInput
    /**
     * In case the drinks found by the `where` argument doesn't exist, create a new drinks with this data.
     * 
    **/
    create: XOR<drinksCreateInput, drinksUncheckedCreateInput>
    /**
     * In case the drinks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<drinksUpdateInput, drinksUncheckedUpdateInput>
  }


  /**
   * drinks delete
   */
  export type drinksDeleteArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
    /**
     * Filter which drinks to delete.
     * 
    **/
    where: drinksWhereUniqueInput
  }


  /**
   * drinks deleteMany
   */
  export type drinksDeleteManyArgs = {
    where?: drinksWhereInput
  }


  /**
   * drinks without action
   */
  export type drinksArgs = {
    /**
     * Select specific fields to fetch from the drinks
     * 
    **/
    select?: drinksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinksInclude | null
  }



  /**
   * Model categories
   */


  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
    max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created_at: Date | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created_at: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type CategoriesAggregateArgs = {
    /**
     * Filter which categories to aggregate.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }


    
    
  export type CategoriesGroupByArgs = {
    where?: categoriesWhereInput
    orderBy?: Enumerable<categoriesOrderByInput>
    by: Array<CategoriesScalarFieldEnum>
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }


  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    description: string
    created_at: Date | null
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Promise<
    Array<
      PickArray<CategoriesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]> 
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      > 
    >


  export type categoriesSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    drinks?: boolean | drinksFindManyArgs
  }

  export type categoriesInclude = {
    drinks?: boolean | drinksFindManyArgs
  }

  export type categoriesGetPayload<
    S extends boolean | null | undefined | categoriesArgs,
    U = keyof S
      > = S extends true
        ? categories
    : S extends undefined
    ? never
    : S extends categoriesArgs | categoriesFindManyArgs
    ?'include' extends U
    ? categories  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'drinks'
        ? Array < drinksGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof categories ?categories [P]
  : 
          P extends 'drinks'
        ? Array < drinksGetPayload<S['select'][P]>>  : never
  } 
    : categories
  : categories


  type categoriesCountArgs = Merge<
    Omit<categoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }
  >

  export interface categoriesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categories'> extends True ? CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>> : CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categories'> extends True ? CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>> : CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs>(
      args?: SelectSubset<T, categoriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<categories>>, PrismaPromise<Array<categoriesGetPayload<T>>>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs>(
      args: SelectSubset<T, categoriesCreateArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs>(
      args?: SelectSubset<T, categoriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs>(
      args: SelectSubset<T, categoriesDeleteArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs>(
      args: SelectSubset<T, categoriesUpdateArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs>(
      args?: SelectSubset<T, categoriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs>(
      args: SelectSubset<T, categoriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs>(
      args: SelectSubset<T, categoriesUpsertArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoriesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    drinks<T extends drinksFindManyArgs = {}>(args?: Subset<T, drinksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<drinks>>, PrismaPromise<Array<drinksGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Throw an Error if a categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Throw an Error if a categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     * 
    **/
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The data needed to create a categories.
     * 
    **/
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs = {
    data: Enumerable<categoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The data needed to update a categories.
     * 
    **/
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs = {
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The filter to search for the categories to update in case it exists.
     * 
    **/
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     * 
    **/
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Filter which categories to delete.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs = {
    where?: categoriesWhereInput
  }


  /**
   * categories without action
   */
  export type categoriesArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
  }



  /**
   * Model images
   */


  export type AggregateImages = {
    _count: ImagesCountAggregateOutputType | null
    count: ImagesCountAggregateOutputType | null
    _avg: ImagesAvgAggregateOutputType | null
    avg: ImagesAvgAggregateOutputType | null
    _sum: ImagesSumAggregateOutputType | null
    sum: ImagesSumAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
    max: ImagesMaxAggregateOutputType | null
  }

  export type ImagesAvgAggregateOutputType = {
    id: number | null
    image_id: number | null
  }

  export type ImagesSumAggregateOutputType = {
    id: number | null
    image_id: number | null
  }

  export type ImagesMinAggregateOutputType = {
    id: number | null
    image_url: string | null
    image_id: number | null
    created_at: Date | null
  }

  export type ImagesMaxAggregateOutputType = {
    id: number | null
    image_url: string | null
    image_id: number | null
    created_at: Date | null
  }

  export type ImagesCountAggregateOutputType = {
    id: number
    image_url: number
    image_id: number
    created_at: number
    _all: number
  }


  export type ImagesAvgAggregateInputType = {
    id?: true
    image_id?: true
  }

  export type ImagesSumAggregateInputType = {
    id?: true
    image_id?: true
  }

  export type ImagesMinAggregateInputType = {
    id?: true
    image_url?: true
    image_id?: true
    created_at?: true
  }

  export type ImagesMaxAggregateInputType = {
    id?: true
    image_url?: true
    image_id?: true
    created_at?: true
  }

  export type ImagesCountAggregateInputType = {
    id?: true
    image_url?: true
    image_id?: true
    created_at?: true
    _all?: true
  }

  export type ImagesAggregateArgs = {
    /**
     * Filter which images to aggregate.
     * 
    **/
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     * 
    **/
    orderBy?: Enumerable<imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images
    **/
    _count?: true | ImagesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ImagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ImagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ImagesMaxAggregateInputType
  }

  export type GetImagesAggregateType<T extends ImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages[P]>
      : GetScalarType<T[P], AggregateImages[P]>
  }


    
    
  export type ImagesGroupByArgs = {
    where?: imagesWhereInput
    orderBy?: Enumerable<imagesOrderByInput>
    by: Array<ImagesScalarFieldEnum>
    having?: imagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagesCountAggregateInputType | true
    _avg?: ImagesAvgAggregateInputType
    _sum?: ImagesSumAggregateInputType
    _min?: ImagesMinAggregateInputType
    _max?: ImagesMaxAggregateInputType
  }


  export type ImagesGroupByOutputType = {
    id: number
    image_url: string
    image_id: number
    created_at: Date | null
    _count: ImagesCountAggregateOutputType | null
    _avg: ImagesAvgAggregateOutputType | null
    _sum: ImagesSumAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  type GetImagesGroupByPayload<T extends ImagesGroupByArgs> = Promise<
    Array<
      PickArray<ImagesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ImagesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ImagesGroupByOutputType[P]> 
            : GetScalarType<T[P], ImagesGroupByOutputType[P]>
        }
      > 
    >


  export type imagesSelect = {
    id?: boolean
    image_url?: boolean
    image_id?: boolean
    drinks?: boolean | drinksArgs
    created_at?: boolean
  }

  export type imagesInclude = {
    drinks?: boolean | drinksArgs
  }

  export type imagesGetPayload<
    S extends boolean | null | undefined | imagesArgs,
    U = keyof S
      > = S extends true
        ? images
    : S extends undefined
    ? never
    : S extends imagesArgs | imagesFindManyArgs
    ?'include' extends U
    ? images  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'drinks'
        ? drinksGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof images ?images [P]
  : 
          P extends 'drinks'
        ? drinksGetPayload<S['select'][P]> : never
  } 
    : images
  : images


  type imagesCountArgs = Merge<
    Omit<imagesFindManyArgs, 'select' | 'include'> & {
      select?: ImagesCountAggregateInputType | true
    }
  >

  export interface imagesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Images that matches the filter.
     * @param {imagesFindUniqueArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, imagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'images'> extends True ? CheckSelect<T, Prisma__imagesClient<images>, Prisma__imagesClient<imagesGetPayload<T>>> : CheckSelect<T, Prisma__imagesClient<images | null >, Prisma__imagesClient<imagesGetPayload<T> | null >>

    /**
     * Find the first Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, imagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'images'> extends True ? CheckSelect<T, Prisma__imagesClient<images>, Prisma__imagesClient<imagesGetPayload<T>>> : CheckSelect<T, Prisma__imagesClient<images | null >, Prisma__imagesClient<imagesGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.images.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagesWithIdOnly = await prisma.images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends imagesFindManyArgs>(
      args?: SelectSubset<T, imagesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<images>>, PrismaPromise<Array<imagesGetPayload<T>>>>

    /**
     * Create a Images.
     * @param {imagesCreateArgs} args - Arguments to create a Images.
     * @example
     * // Create one Images
     * const Images = await prisma.images.create({
     *   data: {
     *     // ... data to create a Images
     *   }
     * })
     * 
    **/
    create<T extends imagesCreateArgs>(
      args: SelectSubset<T, imagesCreateArgs>
    ): CheckSelect<T, Prisma__imagesClient<images>, Prisma__imagesClient<imagesGetPayload<T>>>

    /**
     * Create many Images.
     *     @param {imagesCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const images = await prisma.images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends imagesCreateManyArgs>(
      args?: SelectSubset<T, imagesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Images.
     * @param {imagesDeleteArgs} args - Arguments to delete one Images.
     * @example
     * // Delete one Images
     * const Images = await prisma.images.delete({
     *   where: {
     *     // ... filter to delete one Images
     *   }
     * })
     * 
    **/
    delete<T extends imagesDeleteArgs>(
      args: SelectSubset<T, imagesDeleteArgs>
    ): CheckSelect<T, Prisma__imagesClient<images>, Prisma__imagesClient<imagesGetPayload<T>>>

    /**
     * Update one Images.
     * @param {imagesUpdateArgs} args - Arguments to update one Images.
     * @example
     * // Update one Images
     * const images = await prisma.images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imagesUpdateArgs>(
      args: SelectSubset<T, imagesUpdateArgs>
    ): CheckSelect<T, Prisma__imagesClient<images>, Prisma__imagesClient<imagesGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {imagesDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imagesDeleteManyArgs>(
      args?: SelectSubset<T, imagesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const images = await prisma.images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imagesUpdateManyArgs>(
      args: SelectSubset<T, imagesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Images.
     * @param {imagesUpsertArgs} args - Arguments to update or create a Images.
     * @example
     * // Update or create a Images
     * const images = await prisma.images.upsert({
     *   create: {
     *     // ... data to create a Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images we want to update
     *   }
     * })
    **/
    upsert<T extends imagesUpsertArgs>(
      args: SelectSubset<T, imagesUpsertArgs>
    ): CheckSelect<T, Prisma__imagesClient<images>, Prisma__imagesClient<imagesGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.images.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends imagesCountArgs>(
      args?: Subset<T, imagesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagesAggregateArgs>(args: Subset<T, ImagesAggregateArgs>): PrismaPromise<GetImagesAggregateType<T>>

    /**
     * Group by Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImagesGroupByArgs['orderBy'] }
        : { orderBy?: ImagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__imagesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    drinks<T extends drinksArgs = {}>(args?: Subset<T, drinksArgs>): CheckSelect<T, Prisma__drinksClient<drinks | null >, Prisma__drinksClient<drinksGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * images findUnique
   */
  export type imagesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * Throw an Error if a images can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which images to fetch.
     * 
    **/
    where: imagesWhereUniqueInput
  }


  /**
   * images findFirst
   */
  export type imagesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * Throw an Error if a images can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which images to fetch.
     * 
    **/
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     * 
    **/
    orderBy?: Enumerable<imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     * 
    **/
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     * 
    **/
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * images findMany
   */
  export type imagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * Filter, which images to fetch.
     * 
    **/
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     * 
    **/
    orderBy?: Enumerable<imagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images.
     * 
    **/
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * images create
   */
  export type imagesCreateArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * The data needed to create a images.
     * 
    **/
    data: XOR<imagesCreateInput, imagesUncheckedCreateInput>
  }


  /**
   * images createMany
   */
  export type imagesCreateManyArgs = {
    data: Enumerable<imagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * images update
   */
  export type imagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * The data needed to update a images.
     * 
    **/
    data: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
    /**
     * Choose, which images to update.
     * 
    **/
    where: imagesWhereUniqueInput
  }


  /**
   * images updateMany
   */
  export type imagesUpdateManyArgs = {
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyInput>
    where?: imagesWhereInput
  }


  /**
   * images upsert
   */
  export type imagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * The filter to search for the images to update in case it exists.
     * 
    **/
    where: imagesWhereUniqueInput
    /**
     * In case the images found by the `where` argument doesn't exist, create a new images with this data.
     * 
    **/
    create: XOR<imagesCreateInput, imagesUncheckedCreateInput>
    /**
     * In case the images was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
  }


  /**
   * images delete
   */
  export type imagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
    /**
     * Filter which images to delete.
     * 
    **/
    where: imagesWhereUniqueInput
  }


  /**
   * images deleteMany
   */
  export type imagesDeleteManyArgs = {
    where?: imagesWhereInput
  }


  /**
   * images without action
   */
  export type imagesArgs = {
    /**
     * Select specific fields to fetch from the images
     * 
    **/
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: imagesInclude | null
  }



  /**
   * Model allergies
   */


  export type AggregateAllergies = {
    _count: AllergiesCountAggregateOutputType | null
    count: AllergiesCountAggregateOutputType | null
    _avg: AllergiesAvgAggregateOutputType | null
    avg: AllergiesAvgAggregateOutputType | null
    _sum: AllergiesSumAggregateOutputType | null
    sum: AllergiesSumAggregateOutputType | null
    _min: AllergiesMinAggregateOutputType | null
    min: AllergiesMinAggregateOutputType | null
    _max: AllergiesMaxAggregateOutputType | null
    max: AllergiesMaxAggregateOutputType | null
  }

  export type AllergiesAvgAggregateOutputType = {
    id: number | null
  }

  export type AllergiesSumAggregateOutputType = {
    id: number | null
  }

  export type AllergiesMinAggregateOutputType = {
    id: number | null
    allergy: string | null
    created_at: Date | null
  }

  export type AllergiesMaxAggregateOutputType = {
    id: number | null
    allergy: string | null
    created_at: Date | null
  }

  export type AllergiesCountAggregateOutputType = {
    id: number
    allergy: number
    created_at: number
    _all: number
  }


  export type AllergiesAvgAggregateInputType = {
    id?: true
  }

  export type AllergiesSumAggregateInputType = {
    id?: true
  }

  export type AllergiesMinAggregateInputType = {
    id?: true
    allergy?: true
    created_at?: true
  }

  export type AllergiesMaxAggregateInputType = {
    id?: true
    allergy?: true
    created_at?: true
  }

  export type AllergiesCountAggregateInputType = {
    id?: true
    allergy?: true
    created_at?: true
    _all?: true
  }

  export type AllergiesAggregateArgs = {
    /**
     * Filter which allergies to aggregate.
     * 
    **/
    where?: allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<allergiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned allergies
    **/
    _count?: true | AllergiesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | AllergiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllergiesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: AllergiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllergiesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: AllergiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergiesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: AllergiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergiesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: AllergiesMaxAggregateInputType
  }

  export type GetAllergiesAggregateType<T extends AllergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergies[P]>
      : GetScalarType<T[P], AggregateAllergies[P]>
  }


    
    
  export type AllergiesGroupByArgs = {
    where?: allergiesWhereInput
    orderBy?: Enumerable<allergiesOrderByInput>
    by: Array<AllergiesScalarFieldEnum>
    having?: allergiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergiesCountAggregateInputType | true
    _avg?: AllergiesAvgAggregateInputType
    _sum?: AllergiesSumAggregateInputType
    _min?: AllergiesMinAggregateInputType
    _max?: AllergiesMaxAggregateInputType
  }


  export type AllergiesGroupByOutputType = {
    id: number
    allergy: string
    created_at: Date | null
    _count: AllergiesCountAggregateOutputType | null
    _avg: AllergiesAvgAggregateOutputType | null
    _sum: AllergiesSumAggregateOutputType | null
    _min: AllergiesMinAggregateOutputType | null
    _max: AllergiesMaxAggregateOutputType | null
  }

  type GetAllergiesGroupByPayload<T extends AllergiesGroupByArgs> = Promise<
    Array<
      PickArray<AllergiesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AllergiesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AllergiesGroupByOutputType[P]> 
            : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
        }
      > 
    >


  export type allergiesSelect = {
    id?: boolean
    allergy?: boolean
    created_at?: boolean
    drinks_allergies?: boolean | drinks_allergiesFindManyArgs
  }

  export type allergiesInclude = {
    drinks_allergies?: boolean | drinks_allergiesFindManyArgs
  }

  export type allergiesGetPayload<
    S extends boolean | null | undefined | allergiesArgs,
    U = keyof S
      > = S extends true
        ? allergies
    : S extends undefined
    ? never
    : S extends allergiesArgs | allergiesFindManyArgs
    ?'include' extends U
    ? allergies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'drinks_allergies'
        ? Array < drinks_allergiesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof allergies ?allergies [P]
  : 
          P extends 'drinks_allergies'
        ? Array < drinks_allergiesGetPayload<S['select'][P]>>  : never
  } 
    : allergies
  : allergies


  type allergiesCountArgs = Merge<
    Omit<allergiesFindManyArgs, 'select' | 'include'> & {
      select?: AllergiesCountAggregateInputType | true
    }
  >

  export interface allergiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Allergies that matches the filter.
     * @param {allergiesFindUniqueArgs} args - Arguments to find a Allergies
     * @example
     * // Get one Allergies
     * const allergies = await prisma.allergies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends allergiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, allergiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'allergies'> extends True ? CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>> : CheckSelect<T, Prisma__allergiesClient<allergies | null >, Prisma__allergiesClient<allergiesGetPayload<T> | null >>

    /**
     * Find the first Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesFindFirstArgs} args - Arguments to find a Allergies
     * @example
     * // Get one Allergies
     * const allergies = await prisma.allergies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends allergiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, allergiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'allergies'> extends True ? CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>> : CheckSelect<T, Prisma__allergiesClient<allergies | null >, Prisma__allergiesClient<allergiesGetPayload<T> | null >>

    /**
     * Find zero or more Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergies
     * const allergies = await prisma.allergies.findMany()
     * 
     * // Get first 10 Allergies
     * const allergies = await prisma.allergies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allergiesWithIdOnly = await prisma.allergies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends allergiesFindManyArgs>(
      args?: SelectSubset<T, allergiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<allergies>>, PrismaPromise<Array<allergiesGetPayload<T>>>>

    /**
     * Create a Allergies.
     * @param {allergiesCreateArgs} args - Arguments to create a Allergies.
     * @example
     * // Create one Allergies
     * const Allergies = await prisma.allergies.create({
     *   data: {
     *     // ... data to create a Allergies
     *   }
     * })
     * 
    **/
    create<T extends allergiesCreateArgs>(
      args: SelectSubset<T, allergiesCreateArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Create many Allergies.
     *     @param {allergiesCreateManyArgs} args - Arguments to create many Allergies.
     *     @example
     *     // Create many Allergies
     *     const allergies = await prisma.allergies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends allergiesCreateManyArgs>(
      args?: SelectSubset<T, allergiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Allergies.
     * @param {allergiesDeleteArgs} args - Arguments to delete one Allergies.
     * @example
     * // Delete one Allergies
     * const Allergies = await prisma.allergies.delete({
     *   where: {
     *     // ... filter to delete one Allergies
     *   }
     * })
     * 
    **/
    delete<T extends allergiesDeleteArgs>(
      args: SelectSubset<T, allergiesDeleteArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Update one Allergies.
     * @param {allergiesUpdateArgs} args - Arguments to update one Allergies.
     * @example
     * // Update one Allergies
     * const allergies = await prisma.allergies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends allergiesUpdateArgs>(
      args: SelectSubset<T, allergiesUpdateArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Delete zero or more Allergies.
     * @param {allergiesDeleteManyArgs} args - Arguments to filter Allergies to delete.
     * @example
     * // Delete a few Allergies
     * const { count } = await prisma.allergies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends allergiesDeleteManyArgs>(
      args?: SelectSubset<T, allergiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergies
     * const allergies = await prisma.allergies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends allergiesUpdateManyArgs>(
      args: SelectSubset<T, allergiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Allergies.
     * @param {allergiesUpsertArgs} args - Arguments to update or create a Allergies.
     * @example
     * // Update or create a Allergies
     * const allergies = await prisma.allergies.upsert({
     *   create: {
     *     // ... data to create a Allergies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergies we want to update
     *   }
     * })
    **/
    upsert<T extends allergiesUpsertArgs>(
      args: SelectSubset<T, allergiesUpsertArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Count the number of Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesCountArgs} args - Arguments to filter Allergies to count.
     * @example
     * // Count the number of Allergies
     * const count = await prisma.allergies.count({
     *   where: {
     *     // ... the filter for the Allergies we want to count
     *   }
     * })
    **/
    count<T extends allergiesCountArgs>(
      args?: Subset<T, allergiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergiesAggregateArgs>(args: Subset<T, AllergiesAggregateArgs>): PrismaPromise<GetAllergiesAggregateType<T>>

    /**
     * Group by Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllergiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergiesGroupByArgs['orderBy'] }
        : { orderBy?: AllergiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergiesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for allergies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__allergiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    drinks_allergies<T extends drinks_allergiesFindManyArgs = {}>(args?: Subset<T, drinks_allergiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<drinks_allergies>>, PrismaPromise<Array<drinks_allergiesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * allergies findUnique
   */
  export type allergiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Throw an Error if a allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which allergies to fetch.
     * 
    **/
    where: allergiesWhereUniqueInput
  }


  /**
   * allergies findFirst
   */
  export type allergiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Throw an Error if a allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which allergies to fetch.
     * 
    **/
    where?: allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<allergiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for allergies.
     * 
    **/
    cursor?: allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of allergies.
     * 
    **/
    distinct?: Enumerable<AllergiesScalarFieldEnum>
  }


  /**
   * allergies findMany
   */
  export type allergiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Filter, which allergies to fetch.
     * 
    **/
    where?: allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<allergiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing allergies.
     * 
    **/
    cursor?: allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AllergiesScalarFieldEnum>
  }


  /**
   * allergies create
   */
  export type allergiesCreateArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * The data needed to create a allergies.
     * 
    **/
    data: XOR<allergiesCreateInput, allergiesUncheckedCreateInput>
  }


  /**
   * allergies createMany
   */
  export type allergiesCreateManyArgs = {
    data: Enumerable<allergiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * allergies update
   */
  export type allergiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * The data needed to update a allergies.
     * 
    **/
    data: XOR<allergiesUpdateInput, allergiesUncheckedUpdateInput>
    /**
     * Choose, which allergies to update.
     * 
    **/
    where: allergiesWhereUniqueInput
  }


  /**
   * allergies updateMany
   */
  export type allergiesUpdateManyArgs = {
    data: XOR<allergiesUpdateManyMutationInput, allergiesUncheckedUpdateManyInput>
    where?: allergiesWhereInput
  }


  /**
   * allergies upsert
   */
  export type allergiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * The filter to search for the allergies to update in case it exists.
     * 
    **/
    where: allergiesWhereUniqueInput
    /**
     * In case the allergies found by the `where` argument doesn't exist, create a new allergies with this data.
     * 
    **/
    create: XOR<allergiesCreateInput, allergiesUncheckedCreateInput>
    /**
     * In case the allergies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<allergiesUpdateInput, allergiesUncheckedUpdateInput>
  }


  /**
   * allergies delete
   */
  export type allergiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Filter which allergies to delete.
     * 
    **/
    where: allergiesWhereUniqueInput
  }


  /**
   * allergies deleteMany
   */
  export type allergiesDeleteManyArgs = {
    where?: allergiesWhereInput
  }


  /**
   * allergies without action
   */
  export type allergiesArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
  }



  /**
   * Model drinks_allergies
   */


  export type AggregateDrinks_allergies = {
    _count: Drinks_allergiesCountAggregateOutputType | null
    count: Drinks_allergiesCountAggregateOutputType | null
    _avg: Drinks_allergiesAvgAggregateOutputType | null
    avg: Drinks_allergiesAvgAggregateOutputType | null
    _sum: Drinks_allergiesSumAggregateOutputType | null
    sum: Drinks_allergiesSumAggregateOutputType | null
    _min: Drinks_allergiesMinAggregateOutputType | null
    min: Drinks_allergiesMinAggregateOutputType | null
    _max: Drinks_allergiesMaxAggregateOutputType | null
    max: Drinks_allergiesMaxAggregateOutputType | null
  }

  export type Drinks_allergiesAvgAggregateOutputType = {
    id: number | null
    drink_id: number | null
    allergy_id: number | null
  }

  export type Drinks_allergiesSumAggregateOutputType = {
    id: number | null
    drink_id: number | null
    allergy_id: number | null
  }

  export type Drinks_allergiesMinAggregateOutputType = {
    id: number | null
    drink_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type Drinks_allergiesMaxAggregateOutputType = {
    id: number | null
    drink_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type Drinks_allergiesCountAggregateOutputType = {
    id: number
    drink_id: number
    allergy_id: number
    created_at: number
    _all: number
  }


  export type Drinks_allergiesAvgAggregateInputType = {
    id?: true
    drink_id?: true
    allergy_id?: true
  }

  export type Drinks_allergiesSumAggregateInputType = {
    id?: true
    drink_id?: true
    allergy_id?: true
  }

  export type Drinks_allergiesMinAggregateInputType = {
    id?: true
    drink_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type Drinks_allergiesMaxAggregateInputType = {
    id?: true
    drink_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type Drinks_allergiesCountAggregateInputType = {
    id?: true
    drink_id?: true
    allergy_id?: true
    created_at?: true
    _all?: true
  }

  export type Drinks_allergiesAggregateArgs = {
    /**
     * Filter which drinks_allergies to aggregate.
     * 
    **/
    where?: drinks_allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drinks_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<drinks_allergiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: drinks_allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drinks_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drinks_allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned drinks_allergies
    **/
    _count?: true | Drinks_allergiesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Drinks_allergiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Drinks_allergiesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Drinks_allergiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Drinks_allergiesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Drinks_allergiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Drinks_allergiesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Drinks_allergiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Drinks_allergiesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Drinks_allergiesMaxAggregateInputType
  }

  export type GetDrinks_allergiesAggregateType<T extends Drinks_allergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateDrinks_allergies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrinks_allergies[P]>
      : GetScalarType<T[P], AggregateDrinks_allergies[P]>
  }


    
    
  export type Drinks_allergiesGroupByArgs = {
    where?: drinks_allergiesWhereInput
    orderBy?: Enumerable<drinks_allergiesOrderByInput>
    by: Array<Drinks_allergiesScalarFieldEnum>
    having?: drinks_allergiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Drinks_allergiesCountAggregateInputType | true
    _avg?: Drinks_allergiesAvgAggregateInputType
    _sum?: Drinks_allergiesSumAggregateInputType
    _min?: Drinks_allergiesMinAggregateInputType
    _max?: Drinks_allergiesMaxAggregateInputType
  }


  export type Drinks_allergiesGroupByOutputType = {
    id: number
    drink_id: number
    allergy_id: number
    created_at: Date | null
    _count: Drinks_allergiesCountAggregateOutputType | null
    _avg: Drinks_allergiesAvgAggregateOutputType | null
    _sum: Drinks_allergiesSumAggregateOutputType | null
    _min: Drinks_allergiesMinAggregateOutputType | null
    _max: Drinks_allergiesMaxAggregateOutputType | null
  }

  type GetDrinks_allergiesGroupByPayload<T extends Drinks_allergiesGroupByArgs> = Promise<
    Array<
      PickArray<Drinks_allergiesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Drinks_allergiesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Drinks_allergiesGroupByOutputType[P]> 
            : GetScalarType<T[P], Drinks_allergiesGroupByOutputType[P]>
        }
      > 
    >


  export type drinks_allergiesSelect = {
    id?: boolean
    drink_id?: boolean
    allergy_id?: boolean
    drinks?: boolean | drinksArgs
    allergies?: boolean | allergiesArgs
    created_at?: boolean
  }

  export type drinks_allergiesInclude = {
    drinks?: boolean | drinksArgs
    allergies?: boolean | allergiesArgs
  }

  export type drinks_allergiesGetPayload<
    S extends boolean | null | undefined | drinks_allergiesArgs,
    U = keyof S
      > = S extends true
        ? drinks_allergies
    : S extends undefined
    ? never
    : S extends drinks_allergiesArgs | drinks_allergiesFindManyArgs
    ?'include' extends U
    ? drinks_allergies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'drinks'
        ? drinksGetPayload<S['include'][P]> :
        P extends 'allergies'
        ? allergiesGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof drinks_allergies ?drinks_allergies [P]
  : 
          P extends 'drinks'
        ? drinksGetPayload<S['select'][P]> :
        P extends 'allergies'
        ? allergiesGetPayload<S['select'][P]> : never
  } 
    : drinks_allergies
  : drinks_allergies


  type drinks_allergiesCountArgs = Merge<
    Omit<drinks_allergiesFindManyArgs, 'select' | 'include'> & {
      select?: Drinks_allergiesCountAggregateInputType | true
    }
  >

  export interface drinks_allergiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Drinks_allergies that matches the filter.
     * @param {drinks_allergiesFindUniqueArgs} args - Arguments to find a Drinks_allergies
     * @example
     * // Get one Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends drinks_allergiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, drinks_allergiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'drinks_allergies'> extends True ? CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies>, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T>>> : CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies | null >, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T> | null >>

    /**
     * Find the first Drinks_allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinks_allergiesFindFirstArgs} args - Arguments to find a Drinks_allergies
     * @example
     * // Get one Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends drinks_allergiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, drinks_allergiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'drinks_allergies'> extends True ? CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies>, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T>>> : CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies | null >, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T> | null >>

    /**
     * Find zero or more Drinks_allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinks_allergiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.findMany()
     * 
     * // Get first 10 Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const drinks_allergiesWithIdOnly = await prisma.drinks_allergies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends drinks_allergiesFindManyArgs>(
      args?: SelectSubset<T, drinks_allergiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<drinks_allergies>>, PrismaPromise<Array<drinks_allergiesGetPayload<T>>>>

    /**
     * Create a Drinks_allergies.
     * @param {drinks_allergiesCreateArgs} args - Arguments to create a Drinks_allergies.
     * @example
     * // Create one Drinks_allergies
     * const Drinks_allergies = await prisma.drinks_allergies.create({
     *   data: {
     *     // ... data to create a Drinks_allergies
     *   }
     * })
     * 
    **/
    create<T extends drinks_allergiesCreateArgs>(
      args: SelectSubset<T, drinks_allergiesCreateArgs>
    ): CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies>, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T>>>

    /**
     * Create many Drinks_allergies.
     *     @param {drinks_allergiesCreateManyArgs} args - Arguments to create many Drinks_allergies.
     *     @example
     *     // Create many Drinks_allergies
     *     const drinks_allergies = await prisma.drinks_allergies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends drinks_allergiesCreateManyArgs>(
      args?: SelectSubset<T, drinks_allergiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Drinks_allergies.
     * @param {drinks_allergiesDeleteArgs} args - Arguments to delete one Drinks_allergies.
     * @example
     * // Delete one Drinks_allergies
     * const Drinks_allergies = await prisma.drinks_allergies.delete({
     *   where: {
     *     // ... filter to delete one Drinks_allergies
     *   }
     * })
     * 
    **/
    delete<T extends drinks_allergiesDeleteArgs>(
      args: SelectSubset<T, drinks_allergiesDeleteArgs>
    ): CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies>, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T>>>

    /**
     * Update one Drinks_allergies.
     * @param {drinks_allergiesUpdateArgs} args - Arguments to update one Drinks_allergies.
     * @example
     * // Update one Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends drinks_allergiesUpdateArgs>(
      args: SelectSubset<T, drinks_allergiesUpdateArgs>
    ): CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies>, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T>>>

    /**
     * Delete zero or more Drinks_allergies.
     * @param {drinks_allergiesDeleteManyArgs} args - Arguments to filter Drinks_allergies to delete.
     * @example
     * // Delete a few Drinks_allergies
     * const { count } = await prisma.drinks_allergies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends drinks_allergiesDeleteManyArgs>(
      args?: SelectSubset<T, drinks_allergiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drinks_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinks_allergiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends drinks_allergiesUpdateManyArgs>(
      args: SelectSubset<T, drinks_allergiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Drinks_allergies.
     * @param {drinks_allergiesUpsertArgs} args - Arguments to update or create a Drinks_allergies.
     * @example
     * // Update or create a Drinks_allergies
     * const drinks_allergies = await prisma.drinks_allergies.upsert({
     *   create: {
     *     // ... data to create a Drinks_allergies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Drinks_allergies we want to update
     *   }
     * })
    **/
    upsert<T extends drinks_allergiesUpsertArgs>(
      args: SelectSubset<T, drinks_allergiesUpsertArgs>
    ): CheckSelect<T, Prisma__drinks_allergiesClient<drinks_allergies>, Prisma__drinks_allergiesClient<drinks_allergiesGetPayload<T>>>

    /**
     * Count the number of Drinks_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drinks_allergiesCountArgs} args - Arguments to filter Drinks_allergies to count.
     * @example
     * // Count the number of Drinks_allergies
     * const count = await prisma.drinks_allergies.count({
     *   where: {
     *     // ... the filter for the Drinks_allergies we want to count
     *   }
     * })
    **/
    count<T extends drinks_allergiesCountArgs>(
      args?: Subset<T, drinks_allergiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Drinks_allergiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Drinks_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Drinks_allergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Drinks_allergiesAggregateArgs>(args: Subset<T, Drinks_allergiesAggregateArgs>): PrismaPromise<GetDrinks_allergiesAggregateType<T>>

    /**
     * Group by Drinks_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Drinks_allergiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Drinks_allergiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Drinks_allergiesGroupByArgs['orderBy'] }
        : { orderBy?: Drinks_allergiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Drinks_allergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrinks_allergiesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for drinks_allergies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__drinks_allergiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    drinks<T extends drinksArgs = {}>(args?: Subset<T, drinksArgs>): CheckSelect<T, Prisma__drinksClient<drinks | null >, Prisma__drinksClient<drinksGetPayload<T> | null >>;

    allergies<T extends allergiesArgs = {}>(args?: Subset<T, allergiesArgs>): CheckSelect<T, Prisma__allergiesClient<allergies | null >, Prisma__allergiesClient<allergiesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * drinks_allergies findUnique
   */
  export type drinks_allergiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * Throw an Error if a drinks_allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which drinks_allergies to fetch.
     * 
    **/
    where: drinks_allergiesWhereUniqueInput
  }


  /**
   * drinks_allergies findFirst
   */
  export type drinks_allergiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * Throw an Error if a drinks_allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which drinks_allergies to fetch.
     * 
    **/
    where?: drinks_allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drinks_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<drinks_allergiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for drinks_allergies.
     * 
    **/
    cursor?: drinks_allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drinks_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drinks_allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of drinks_allergies.
     * 
    **/
    distinct?: Enumerable<Drinks_allergiesScalarFieldEnum>
  }


  /**
   * drinks_allergies findMany
   */
  export type drinks_allergiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * Filter, which drinks_allergies to fetch.
     * 
    **/
    where?: drinks_allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drinks_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<drinks_allergiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing drinks_allergies.
     * 
    **/
    cursor?: drinks_allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drinks_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drinks_allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Drinks_allergiesScalarFieldEnum>
  }


  /**
   * drinks_allergies create
   */
  export type drinks_allergiesCreateArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * The data needed to create a drinks_allergies.
     * 
    **/
    data: XOR<drinks_allergiesCreateInput, drinks_allergiesUncheckedCreateInput>
  }


  /**
   * drinks_allergies createMany
   */
  export type drinks_allergiesCreateManyArgs = {
    data: Enumerable<drinks_allergiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * drinks_allergies update
   */
  export type drinks_allergiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * The data needed to update a drinks_allergies.
     * 
    **/
    data: XOR<drinks_allergiesUpdateInput, drinks_allergiesUncheckedUpdateInput>
    /**
     * Choose, which drinks_allergies to update.
     * 
    **/
    where: drinks_allergiesWhereUniqueInput
  }


  /**
   * drinks_allergies updateMany
   */
  export type drinks_allergiesUpdateManyArgs = {
    data: XOR<drinks_allergiesUpdateManyMutationInput, drinks_allergiesUncheckedUpdateManyInput>
    where?: drinks_allergiesWhereInput
  }


  /**
   * drinks_allergies upsert
   */
  export type drinks_allergiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * The filter to search for the drinks_allergies to update in case it exists.
     * 
    **/
    where: drinks_allergiesWhereUniqueInput
    /**
     * In case the drinks_allergies found by the `where` argument doesn't exist, create a new drinks_allergies with this data.
     * 
    **/
    create: XOR<drinks_allergiesCreateInput, drinks_allergiesUncheckedCreateInput>
    /**
     * In case the drinks_allergies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<drinks_allergiesUpdateInput, drinks_allergiesUncheckedUpdateInput>
  }


  /**
   * drinks_allergies delete
   */
  export type drinks_allergiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
    /**
     * Filter which drinks_allergies to delete.
     * 
    **/
    where: drinks_allergiesWhereUniqueInput
  }


  /**
   * drinks_allergies deleteMany
   */
  export type drinks_allergiesDeleteManyArgs = {
    where?: drinks_allergiesWhereInput
  }


  /**
   * drinks_allergies without action
   */
  export type drinks_allergiesArgs = {
    /**
     * Select specific fields to fetch from the drinks_allergies
     * 
    **/
    select?: drinks_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: drinks_allergiesInclude | null
  }



  /**
   * Model nutritions
   */


  export type AggregateNutritions = {
    _count: NutritionsCountAggregateOutputType | null
    count: NutritionsCountAggregateOutputType | null
    _avg: NutritionsAvgAggregateOutputType | null
    avg: NutritionsAvgAggregateOutputType | null
    _sum: NutritionsSumAggregateOutputType | null
    sum: NutritionsSumAggregateOutputType | null
    _min: NutritionsMinAggregateOutputType | null
    min: NutritionsMinAggregateOutputType | null
    _max: NutritionsMaxAggregateOutputType | null
    max: NutritionsMaxAggregateOutputType | null
  }

  export type NutritionsAvgAggregateOutputType = {
    id: number | null
    nutrition_id: number | null
  }

  export type NutritionsSumAggregateOutputType = {
    id: number | null
    nutrition_id: number | null
  }

  export type NutritionsMinAggregateOutputType = {
    id: number | null
    calories: string | null
    sodium: string | null
    fat: string | null
    sugar: string | null
    protein: string | null
    caffein: string | null
    nutrition_id: number | null
    created_at: Date | null
  }

  export type NutritionsMaxAggregateOutputType = {
    id: number | null
    calories: string | null
    sodium: string | null
    fat: string | null
    sugar: string | null
    protein: string | null
    caffein: string | null
    nutrition_id: number | null
    created_at: Date | null
  }

  export type NutritionsCountAggregateOutputType = {
    id: number
    calories: number
    sodium: number
    fat: number
    sugar: number
    protein: number
    caffein: number
    nutrition_id: number
    created_at: number
    _all: number
  }


  export type NutritionsAvgAggregateInputType = {
    id?: true
    nutrition_id?: true
  }

  export type NutritionsSumAggregateInputType = {
    id?: true
    nutrition_id?: true
  }

  export type NutritionsMinAggregateInputType = {
    id?: true
    calories?: true
    sodium?: true
    fat?: true
    sugar?: true
    protein?: true
    caffein?: true
    nutrition_id?: true
    created_at?: true
  }

  export type NutritionsMaxAggregateInputType = {
    id?: true
    calories?: true
    sodium?: true
    fat?: true
    sugar?: true
    protein?: true
    caffein?: true
    nutrition_id?: true
    created_at?: true
  }

  export type NutritionsCountAggregateInputType = {
    id?: true
    calories?: true
    sodium?: true
    fat?: true
    sugar?: true
    protein?: true
    caffein?: true
    nutrition_id?: true
    created_at?: true
    _all?: true
  }

  export type NutritionsAggregateArgs = {
    /**
     * Filter which nutritions to aggregate.
     * 
    **/
    where?: nutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<nutritionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: nutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned nutritions
    **/
    _count?: true | NutritionsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | NutritionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NutritionsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: NutritionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NutritionsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: NutritionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NutritionsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: NutritionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NutritionsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: NutritionsMaxAggregateInputType
  }

  export type GetNutritionsAggregateType<T extends NutritionsAggregateArgs> = {
        [P in keyof T & keyof AggregateNutritions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNutritions[P]>
      : GetScalarType<T[P], AggregateNutritions[P]>
  }


    
    
  export type NutritionsGroupByArgs = {
    where?: nutritionsWhereInput
    orderBy?: Enumerable<nutritionsOrderByInput>
    by: Array<NutritionsScalarFieldEnum>
    having?: nutritionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NutritionsCountAggregateInputType | true
    _avg?: NutritionsAvgAggregateInputType
    _sum?: NutritionsSumAggregateInputType
    _min?: NutritionsMinAggregateInputType
    _max?: NutritionsMaxAggregateInputType
  }


  export type NutritionsGroupByOutputType = {
    id: number
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    nutrition_id: number
    created_at: Date | null
    _count: NutritionsCountAggregateOutputType | null
    _avg: NutritionsAvgAggregateOutputType | null
    _sum: NutritionsSumAggregateOutputType | null
    _min: NutritionsMinAggregateOutputType | null
    _max: NutritionsMaxAggregateOutputType | null
  }

  type GetNutritionsGroupByPayload<T extends NutritionsGroupByArgs> = Promise<
    Array<
      PickArray<NutritionsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof NutritionsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], NutritionsGroupByOutputType[P]> 
            : GetScalarType<T[P], NutritionsGroupByOutputType[P]>
        }
      > 
    >


  export type nutritionsSelect = {
    id?: boolean
    calories?: boolean
    sodium?: boolean
    fat?: boolean
    sugar?: boolean
    protein?: boolean
    caffein?: boolean
    nutrition_id?: boolean
    drinks?: boolean | drinksArgs
    created_at?: boolean
  }

  export type nutritionsInclude = {
    drinks?: boolean | drinksArgs
  }

  export type nutritionsGetPayload<
    S extends boolean | null | undefined | nutritionsArgs,
    U = keyof S
      > = S extends true
        ? nutritions
    : S extends undefined
    ? never
    : S extends nutritionsArgs | nutritionsFindManyArgs
    ?'include' extends U
    ? nutritions  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'drinks'
        ? drinksGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof nutritions ?nutritions [P]
  : 
          P extends 'drinks'
        ? drinksGetPayload<S['select'][P]> : never
  } 
    : nutritions
  : nutritions


  type nutritionsCountArgs = Merge<
    Omit<nutritionsFindManyArgs, 'select' | 'include'> & {
      select?: NutritionsCountAggregateInputType | true
    }
  >

  export interface nutritionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Nutritions that matches the filter.
     * @param {nutritionsFindUniqueArgs} args - Arguments to find a Nutritions
     * @example
     * // Get one Nutritions
     * const nutritions = await prisma.nutritions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends nutritionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, nutritionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'nutritions'> extends True ? CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>> : CheckSelect<T, Prisma__nutritionsClient<nutritions | null >, Prisma__nutritionsClient<nutritionsGetPayload<T> | null >>

    /**
     * Find the first Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsFindFirstArgs} args - Arguments to find a Nutritions
     * @example
     * // Get one Nutritions
     * const nutritions = await prisma.nutritions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends nutritionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, nutritionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'nutritions'> extends True ? CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>> : CheckSelect<T, Prisma__nutritionsClient<nutritions | null >, Prisma__nutritionsClient<nutritionsGetPayload<T> | null >>

    /**
     * Find zero or more Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nutritions
     * const nutritions = await prisma.nutritions.findMany()
     * 
     * // Get first 10 Nutritions
     * const nutritions = await prisma.nutritions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nutritionsWithIdOnly = await prisma.nutritions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends nutritionsFindManyArgs>(
      args?: SelectSubset<T, nutritionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<nutritions>>, PrismaPromise<Array<nutritionsGetPayload<T>>>>

    /**
     * Create a Nutritions.
     * @param {nutritionsCreateArgs} args - Arguments to create a Nutritions.
     * @example
     * // Create one Nutritions
     * const Nutritions = await prisma.nutritions.create({
     *   data: {
     *     // ... data to create a Nutritions
     *   }
     * })
     * 
    **/
    create<T extends nutritionsCreateArgs>(
      args: SelectSubset<T, nutritionsCreateArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Create many Nutritions.
     *     @param {nutritionsCreateManyArgs} args - Arguments to create many Nutritions.
     *     @example
     *     // Create many Nutritions
     *     const nutritions = await prisma.nutritions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends nutritionsCreateManyArgs>(
      args?: SelectSubset<T, nutritionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Nutritions.
     * @param {nutritionsDeleteArgs} args - Arguments to delete one Nutritions.
     * @example
     * // Delete one Nutritions
     * const Nutritions = await prisma.nutritions.delete({
     *   where: {
     *     // ... filter to delete one Nutritions
     *   }
     * })
     * 
    **/
    delete<T extends nutritionsDeleteArgs>(
      args: SelectSubset<T, nutritionsDeleteArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Update one Nutritions.
     * @param {nutritionsUpdateArgs} args - Arguments to update one Nutritions.
     * @example
     * // Update one Nutritions
     * const nutritions = await prisma.nutritions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends nutritionsUpdateArgs>(
      args: SelectSubset<T, nutritionsUpdateArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Delete zero or more Nutritions.
     * @param {nutritionsDeleteManyArgs} args - Arguments to filter Nutritions to delete.
     * @example
     * // Delete a few Nutritions
     * const { count } = await prisma.nutritions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends nutritionsDeleteManyArgs>(
      args?: SelectSubset<T, nutritionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nutritions
     * const nutritions = await prisma.nutritions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends nutritionsUpdateManyArgs>(
      args: SelectSubset<T, nutritionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Nutritions.
     * @param {nutritionsUpsertArgs} args - Arguments to update or create a Nutritions.
     * @example
     * // Update or create a Nutritions
     * const nutritions = await prisma.nutritions.upsert({
     *   create: {
     *     // ... data to create a Nutritions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nutritions we want to update
     *   }
     * })
    **/
    upsert<T extends nutritionsUpsertArgs>(
      args: SelectSubset<T, nutritionsUpsertArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Count the number of Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsCountArgs} args - Arguments to filter Nutritions to count.
     * @example
     * // Count the number of Nutritions
     * const count = await prisma.nutritions.count({
     *   where: {
     *     // ... the filter for the Nutritions we want to count
     *   }
     * })
    **/
    count<T extends nutritionsCountArgs>(
      args?: Subset<T, nutritionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NutritionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NutritionsAggregateArgs>(args: Subset<T, NutritionsAggregateArgs>): PrismaPromise<GetNutritionsAggregateType<T>>

    /**
     * Group by Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NutritionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NutritionsGroupByArgs['orderBy'] }
        : { orderBy?: NutritionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NutritionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNutritionsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for nutritions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__nutritionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    drinks<T extends drinksArgs = {}>(args?: Subset<T, drinksArgs>): CheckSelect<T, Prisma__drinksClient<drinks | null >, Prisma__drinksClient<drinksGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * nutritions findUnique
   */
  export type nutritionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Throw an Error if a nutritions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which nutritions to fetch.
     * 
    **/
    where: nutritionsWhereUniqueInput
  }


  /**
   * nutritions findFirst
   */
  export type nutritionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Throw an Error if a nutritions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which nutritions to fetch.
     * 
    **/
    where?: nutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<nutritionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for nutritions.
     * 
    **/
    cursor?: nutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of nutritions.
     * 
    **/
    distinct?: Enumerable<NutritionsScalarFieldEnum>
  }


  /**
   * nutritions findMany
   */
  export type nutritionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Filter, which nutritions to fetch.
     * 
    **/
    where?: nutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<nutritionsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing nutritions.
     * 
    **/
    cursor?: nutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nutritions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NutritionsScalarFieldEnum>
  }


  /**
   * nutritions create
   */
  export type nutritionsCreateArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * The data needed to create a nutritions.
     * 
    **/
    data: XOR<nutritionsCreateInput, nutritionsUncheckedCreateInput>
  }


  /**
   * nutritions createMany
   */
  export type nutritionsCreateManyArgs = {
    data: Enumerable<nutritionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * nutritions update
   */
  export type nutritionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * The data needed to update a nutritions.
     * 
    **/
    data: XOR<nutritionsUpdateInput, nutritionsUncheckedUpdateInput>
    /**
     * Choose, which nutritions to update.
     * 
    **/
    where: nutritionsWhereUniqueInput
  }


  /**
   * nutritions updateMany
   */
  export type nutritionsUpdateManyArgs = {
    data: XOR<nutritionsUpdateManyMutationInput, nutritionsUncheckedUpdateManyInput>
    where?: nutritionsWhereInput
  }


  /**
   * nutritions upsert
   */
  export type nutritionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * The filter to search for the nutritions to update in case it exists.
     * 
    **/
    where: nutritionsWhereUniqueInput
    /**
     * In case the nutritions found by the `where` argument doesn't exist, create a new nutritions with this data.
     * 
    **/
    create: XOR<nutritionsCreateInput, nutritionsUncheckedCreateInput>
    /**
     * In case the nutritions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<nutritionsUpdateInput, nutritionsUncheckedUpdateInput>
  }


  /**
   * nutritions delete
   */
  export type nutritionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Filter which nutritions to delete.
     * 
    **/
    where: nutritionsWhereUniqueInput
  }


  /**
   * nutritions deleteMany
   */
  export type nutritionsDeleteManyArgs = {
    where?: nutritionsWhereInput
  }


  /**
   * nutritions without action
   */
  export type nutritionsArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DrinksScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category_id: 'category_id',
    description: 'description',
    is_new: 'is_new',
    created_at: 'created_at'
  };

  export type DrinksScalarFieldEnum = (typeof DrinksScalarFieldEnum)[keyof typeof DrinksScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created_at: 'created_at'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ImagesScalarFieldEnum: {
    id: 'id',
    image_url: 'image_url',
    image_id: 'image_id',
    created_at: 'created_at'
  };

  export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


  export const AllergiesScalarFieldEnum: {
    id: 'id',
    allergy: 'allergy',
    created_at: 'created_at'
  };

  export type AllergiesScalarFieldEnum = (typeof AllergiesScalarFieldEnum)[keyof typeof AllergiesScalarFieldEnum]


  export const Drinks_allergiesScalarFieldEnum: {
    id: 'id',
    drink_id: 'drink_id',
    allergy_id: 'allergy_id',
    created_at: 'created_at'
  };

  export type Drinks_allergiesScalarFieldEnum = (typeof Drinks_allergiesScalarFieldEnum)[keyof typeof Drinks_allergiesScalarFieldEnum]


  export const NutritionsScalarFieldEnum: {
    id: 'id',
    calories: 'calories',
    sodium: 'sodium',
    fat: 'fat',
    sugar: 'sugar',
    protein: 'protein',
    caffein: 'caffein',
    nutrition_id: 'nutrition_id',
    created_at: 'created_at'
  };

  export type NutritionsScalarFieldEnum = (typeof NutritionsScalarFieldEnum)[keyof typeof NutritionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type drinksWhereInput = {
    AND?: Enumerable<drinksWhereInput>
    OR?: Enumerable<drinksWhereInput>
    NOT?: Enumerable<drinksWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    category_id?: IntFilter | number
    description?: StringFilter | string
    is_new?: BoolFilter | boolean
    created_at?: DateTimeNullableFilter | Date | string | null
    categories?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    images?: ImagesListRelationFilter
    drinks_allergies?: Drinks_allergiesListRelationFilter
    nutritions?: NutritionsListRelationFilter
  }

  export type drinksOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    category_id?: SortOrder
    description?: SortOrder
    is_new?: SortOrder
    created_at?: SortOrder
  }

  export type drinksWhereUniqueInput = {
    id?: number
  }

  export type drinksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<drinksScalarWhereWithAggregatesInput>
    OR?: Enumerable<drinksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<drinksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    category_id?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    is_new?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type categoriesWhereInput = {
    AND?: Enumerable<categoriesWhereInput>
    OR?: Enumerable<categoriesWhereInput>
    NOT?: Enumerable<categoriesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    drinks?: DrinksListRelationFilter
  }

  export type categoriesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type categoriesWhereUniqueInput = {
    id?: number
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type imagesWhereInput = {
    AND?: Enumerable<imagesWhereInput>
    OR?: Enumerable<imagesWhereInput>
    NOT?: Enumerable<imagesWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    image_id?: IntFilter | number
    drinks?: XOR<DrinksRelationFilter, drinksWhereInput>
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type imagesOrderByInput = {
    id?: SortOrder
    image_url?: SortOrder
    image_id?: SortOrder
    created_at?: SortOrder
  }

  export type imagesWhereUniqueInput = {
    id?: number
  }

  export type imagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<imagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<imagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<imagesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image_url?: StringWithAggregatesFilter | string
    image_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type allergiesWhereInput = {
    AND?: Enumerable<allergiesWhereInput>
    OR?: Enumerable<allergiesWhereInput>
    NOT?: Enumerable<allergiesWhereInput>
    id?: IntFilter | number
    allergy?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    drinks_allergies?: Drinks_allergiesListRelationFilter
  }

  export type allergiesOrderByInput = {
    id?: SortOrder
    allergy?: SortOrder
    created_at?: SortOrder
  }

  export type allergiesWhereUniqueInput = {
    id?: number
  }

  export type allergiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<allergiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<allergiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<allergiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    allergy?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type drinks_allergiesWhereInput = {
    AND?: Enumerable<drinks_allergiesWhereInput>
    OR?: Enumerable<drinks_allergiesWhereInput>
    NOT?: Enumerable<drinks_allergiesWhereInput>
    id?: IntFilter | number
    drink_id?: IntFilter | number
    allergy_id?: IntFilter | number
    drinks?: XOR<DrinksRelationFilter, drinksWhereInput>
    allergies?: XOR<AllergiesRelationFilter, allergiesWhereInput>
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type drinks_allergiesOrderByInput = {
    id?: SortOrder
    drink_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type drinks_allergiesWhereUniqueInput = {
    id?: number
  }

  export type drinks_allergiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<drinks_allergiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<drinks_allergiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<drinks_allergiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    drink_id?: IntWithAggregatesFilter | number
    allergy_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type nutritionsWhereInput = {
    AND?: Enumerable<nutritionsWhereInput>
    OR?: Enumerable<nutritionsWhereInput>
    NOT?: Enumerable<nutritionsWhereInput>
    id?: IntFilter | number
    calories?: StringFilter | string
    sodium?: StringFilter | string
    fat?: StringFilter | string
    sugar?: StringFilter | string
    protein?: StringFilter | string
    caffein?: StringFilter | string
    nutrition_id?: IntFilter | number
    drinks?: XOR<DrinksRelationFilter, drinksWhereInput>
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type nutritionsOrderByInput = {
    id?: SortOrder
    calories?: SortOrder
    sodium?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    protein?: SortOrder
    caffein?: SortOrder
    nutrition_id?: SortOrder
    created_at?: SortOrder
  }

  export type nutritionsWhereUniqueInput = {
    id?: number
  }

  export type nutritionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<nutritionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<nutritionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<nutritionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    calories?: StringWithAggregatesFilter | string
    sodium?: StringWithAggregatesFilter | string
    fat?: StringWithAggregatesFilter | string
    sugar?: StringWithAggregatesFilter | string
    protein?: StringWithAggregatesFilter | string
    caffein?: StringWithAggregatesFilter | string
    nutrition_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type drinksCreateInput = {
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
    categories: categoriesCreateNestedOneWithoutDrinksInput
    images?: imagesCreateNestedManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsCreateNestedManyWithoutDrinksInput
  }

  export type drinksUncheckedCreateInput = {
    id?: number
    name: string
    category_id: number
    description: string
    is_new: boolean
    created_at?: Date | string | null
    images?: imagesUncheckedCreateNestedManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUncheckedCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutDrinksInput
  }

  export type drinksUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: categoriesUpdateOneRequiredWithoutDrinksInput
    images?: imagesUpdateManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUpdateManyWithoutDrinksInput
  }

  export type drinksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    images?: imagesUncheckedUpdateManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUncheckedUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutDrinksInput
  }

  export type drinksCreateManyInput = {
    id?: number
    name: string
    category_id: number
    description: string
    is_new: boolean
    created_at?: Date | string | null
  }

  export type drinksUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesCreateInput = {
    name: string
    description: string
    created_at?: Date | string | null
    drinks?: drinksCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string | null
    drinks?: drinksUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks?: drinksUpdateManyWithoutCategoriesInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks?: drinksUncheckedUpdateManyWithoutCategoriesInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string | null
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type imagesCreateInput = {
    image_url: string
    created_at?: Date | string | null
    drinks: drinksCreateNestedOneWithoutImagesInput
  }

  export type imagesUncheckedCreateInput = {
    id?: number
    image_url: string
    image_id: number
    created_at?: Date | string | null
  }

  export type imagesUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks?: drinksUpdateOneRequiredWithoutImagesInput
  }

  export type imagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    image_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type imagesCreateManyInput = {
    id?: number
    image_url: string
    image_id: number
    created_at?: Date | string | null
  }

  export type imagesUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type imagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    image_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergiesCreateInput = {
    allergy: string
    created_at?: Date | string | null
    drinks_allergies?: drinks_allergiesCreateNestedManyWithoutAllergiesInput
  }

  export type allergiesUncheckedCreateInput = {
    id?: number
    allergy: string
    created_at?: Date | string | null
    drinks_allergies?: drinks_allergiesUncheckedCreateNestedManyWithoutAllergiesInput
  }

  export type allergiesUpdateInput = {
    allergy?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks_allergies?: drinks_allergiesUpdateManyWithoutAllergiesInput
  }

  export type allergiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks_allergies?: drinks_allergiesUncheckedUpdateManyWithoutAllergiesInput
  }

  export type allergiesCreateManyInput = {
    id?: number
    allergy: string
    created_at?: Date | string | null
  }

  export type allergiesUpdateManyMutationInput = {
    allergy?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinks_allergiesCreateInput = {
    created_at?: Date | string | null
    drinks: drinksCreateNestedOneWithoutDrinks_allergiesInput
    allergies: allergiesCreateNestedOneWithoutDrinks_allergiesInput
  }

  export type drinks_allergiesUncheckedCreateInput = {
    id?: number
    drink_id: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type drinks_allergiesUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks?: drinksUpdateOneRequiredWithoutDrinks_allergiesInput
    allergies?: allergiesUpdateOneRequiredWithoutDrinks_allergiesInput
  }

  export type drinks_allergiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    drink_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinks_allergiesCreateManyInput = {
    id?: number
    drink_id: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type drinks_allergiesUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinks_allergiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    drink_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsCreateInput = {
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    created_at?: Date | string | null
    drinks: drinksCreateNestedOneWithoutNutritionsInput
  }

  export type nutritionsUncheckedCreateInput = {
    id?: number
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    nutrition_id: number
    created_at?: Date | string | null
  }

  export type nutritionsUpdateInput = {
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks?: drinksUpdateOneRequiredWithoutNutritionsInput
  }

  export type nutritionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    nutrition_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsCreateManyInput = {
    id?: number
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    nutrition_id: number
    created_at?: Date | string | null
  }

  export type nutritionsUpdateManyMutationInput = {
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    nutrition_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type ImagesListRelationFilter = {
    every?: imagesWhereInput
    some?: imagesWhereInput
    none?: imagesWhereInput
  }

  export type Drinks_allergiesListRelationFilter = {
    every?: drinks_allergiesWhereInput
    some?: drinks_allergiesWhereInput
    none?: drinks_allergiesWhereInput
  }

  export type NutritionsListRelationFilter = {
    every?: nutritionsWhereInput
    some?: nutritionsWhereInput
    none?: nutritionsWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type DrinksListRelationFilter = {
    every?: drinksWhereInput
    some?: drinksWhereInput
    none?: drinksWhereInput
  }

  export type DrinksRelationFilter = {
    is?: drinksWhereInput
    isNot?: drinksWhereInput
  }

  export type AllergiesRelationFilter = {
    is?: allergiesWhereInput
    isNot?: allergiesWhereInput
  }

  export type categoriesCreateNestedOneWithoutDrinksInput = {
    create?: XOR<categoriesCreateWithoutDrinksInput, categoriesUncheckedCreateWithoutDrinksInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutDrinksInput
    connect?: categoriesWhereUniqueInput
  }

  export type imagesCreateNestedManyWithoutDrinksInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDrinksInput>, Enumerable<imagesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDrinksInput>
    createMany?: imagesCreateManyDrinksInputEnvelope
    connect?: Enumerable<imagesWhereUniqueInput>
  }

  export type drinks_allergiesCreateNestedManyWithoutDrinksInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutDrinksInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutDrinksInput>
    createMany?: drinks_allergiesCreateManyDrinksInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
  }

  export type nutritionsCreateNestedManyWithoutDrinksInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutDrinksInput>, Enumerable<nutritionsUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutDrinksInput>
    createMany?: nutritionsCreateManyDrinksInputEnvelope
    connect?: Enumerable<nutritionsWhereUniqueInput>
  }

  export type imagesUncheckedCreateNestedManyWithoutDrinksInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDrinksInput>, Enumerable<imagesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDrinksInput>
    createMany?: imagesCreateManyDrinksInputEnvelope
    connect?: Enumerable<imagesWhereUniqueInput>
  }

  export type drinks_allergiesUncheckedCreateNestedManyWithoutDrinksInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutDrinksInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutDrinksInput>
    createMany?: drinks_allergiesCreateManyDrinksInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
  }

  export type nutritionsUncheckedCreateNestedManyWithoutDrinksInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutDrinksInput>, Enumerable<nutritionsUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutDrinksInput>
    createMany?: nutritionsCreateManyDrinksInputEnvelope
    connect?: Enumerable<nutritionsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type categoriesUpdateOneRequiredWithoutDrinksInput = {
    create?: XOR<categoriesCreateWithoutDrinksInput, categoriesUncheckedCreateWithoutDrinksInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutDrinksInput
    upsert?: categoriesUpsertWithoutDrinksInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<categoriesUpdateWithoutDrinksInput, categoriesUncheckedUpdateWithoutDrinksInput>
  }

  export type imagesUpdateManyWithoutDrinksInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDrinksInput>, Enumerable<imagesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDrinksInput>
    upsert?: Enumerable<imagesUpsertWithWhereUniqueWithoutDrinksInput>
    createMany?: imagesCreateManyDrinksInputEnvelope
    connect?: Enumerable<imagesWhereUniqueInput>
    set?: Enumerable<imagesWhereUniqueInput>
    disconnect?: Enumerable<imagesWhereUniqueInput>
    delete?: Enumerable<imagesWhereUniqueInput>
    update?: Enumerable<imagesUpdateWithWhereUniqueWithoutDrinksInput>
    updateMany?: Enumerable<imagesUpdateManyWithWhereWithoutDrinksInput>
    deleteMany?: Enumerable<imagesScalarWhereInput>
  }

  export type drinks_allergiesUpdateManyWithoutDrinksInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutDrinksInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutDrinksInput>
    upsert?: Enumerable<drinks_allergiesUpsertWithWhereUniqueWithoutDrinksInput>
    createMany?: drinks_allergiesCreateManyDrinksInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
    set?: Enumerable<drinks_allergiesWhereUniqueInput>
    disconnect?: Enumerable<drinks_allergiesWhereUniqueInput>
    delete?: Enumerable<drinks_allergiesWhereUniqueInput>
    update?: Enumerable<drinks_allergiesUpdateWithWhereUniqueWithoutDrinksInput>
    updateMany?: Enumerable<drinks_allergiesUpdateManyWithWhereWithoutDrinksInput>
    deleteMany?: Enumerable<drinks_allergiesScalarWhereInput>
  }

  export type nutritionsUpdateManyWithoutDrinksInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutDrinksInput>, Enumerable<nutritionsUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutDrinksInput>
    upsert?: Enumerable<nutritionsUpsertWithWhereUniqueWithoutDrinksInput>
    createMany?: nutritionsCreateManyDrinksInputEnvelope
    connect?: Enumerable<nutritionsWhereUniqueInput>
    set?: Enumerable<nutritionsWhereUniqueInput>
    disconnect?: Enumerable<nutritionsWhereUniqueInput>
    delete?: Enumerable<nutritionsWhereUniqueInput>
    update?: Enumerable<nutritionsUpdateWithWhereUniqueWithoutDrinksInput>
    updateMany?: Enumerable<nutritionsUpdateManyWithWhereWithoutDrinksInput>
    deleteMany?: Enumerable<nutritionsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type imagesUncheckedUpdateManyWithoutDrinksInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDrinksInput>, Enumerable<imagesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDrinksInput>
    upsert?: Enumerable<imagesUpsertWithWhereUniqueWithoutDrinksInput>
    createMany?: imagesCreateManyDrinksInputEnvelope
    connect?: Enumerable<imagesWhereUniqueInput>
    set?: Enumerable<imagesWhereUniqueInput>
    disconnect?: Enumerable<imagesWhereUniqueInput>
    delete?: Enumerable<imagesWhereUniqueInput>
    update?: Enumerable<imagesUpdateWithWhereUniqueWithoutDrinksInput>
    updateMany?: Enumerable<imagesUpdateManyWithWhereWithoutDrinksInput>
    deleteMany?: Enumerable<imagesScalarWhereInput>
  }

  export type drinks_allergiesUncheckedUpdateManyWithoutDrinksInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutDrinksInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutDrinksInput>
    upsert?: Enumerable<drinks_allergiesUpsertWithWhereUniqueWithoutDrinksInput>
    createMany?: drinks_allergiesCreateManyDrinksInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
    set?: Enumerable<drinks_allergiesWhereUniqueInput>
    disconnect?: Enumerable<drinks_allergiesWhereUniqueInput>
    delete?: Enumerable<drinks_allergiesWhereUniqueInput>
    update?: Enumerable<drinks_allergiesUpdateWithWhereUniqueWithoutDrinksInput>
    updateMany?: Enumerable<drinks_allergiesUpdateManyWithWhereWithoutDrinksInput>
    deleteMany?: Enumerable<drinks_allergiesScalarWhereInput>
  }

  export type nutritionsUncheckedUpdateManyWithoutDrinksInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutDrinksInput>, Enumerable<nutritionsUncheckedCreateWithoutDrinksInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutDrinksInput>
    upsert?: Enumerable<nutritionsUpsertWithWhereUniqueWithoutDrinksInput>
    createMany?: nutritionsCreateManyDrinksInputEnvelope
    connect?: Enumerable<nutritionsWhereUniqueInput>
    set?: Enumerable<nutritionsWhereUniqueInput>
    disconnect?: Enumerable<nutritionsWhereUniqueInput>
    delete?: Enumerable<nutritionsWhereUniqueInput>
    update?: Enumerable<nutritionsUpdateWithWhereUniqueWithoutDrinksInput>
    updateMany?: Enumerable<nutritionsUpdateManyWithWhereWithoutDrinksInput>
    deleteMany?: Enumerable<nutritionsScalarWhereInput>
  }

  export type drinksCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<drinksCreateWithoutCategoriesInput>, Enumerable<drinksUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<drinksCreateOrConnectWithoutCategoriesInput>
    createMany?: drinksCreateManyCategoriesInputEnvelope
    connect?: Enumerable<drinksWhereUniqueInput>
  }

  export type drinksUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<drinksCreateWithoutCategoriesInput>, Enumerable<drinksUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<drinksCreateOrConnectWithoutCategoriesInput>
    createMany?: drinksCreateManyCategoriesInputEnvelope
    connect?: Enumerable<drinksWhereUniqueInput>
  }

  export type drinksUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<drinksCreateWithoutCategoriesInput>, Enumerable<drinksUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<drinksCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<drinksUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: drinksCreateManyCategoriesInputEnvelope
    connect?: Enumerable<drinksWhereUniqueInput>
    set?: Enumerable<drinksWhereUniqueInput>
    disconnect?: Enumerable<drinksWhereUniqueInput>
    delete?: Enumerable<drinksWhereUniqueInput>
    update?: Enumerable<drinksUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<drinksUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<drinksScalarWhereInput>
  }

  export type drinksUncheckedUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<drinksCreateWithoutCategoriesInput>, Enumerable<drinksUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<drinksCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<drinksUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: drinksCreateManyCategoriesInputEnvelope
    connect?: Enumerable<drinksWhereUniqueInput>
    set?: Enumerable<drinksWhereUniqueInput>
    disconnect?: Enumerable<drinksWhereUniqueInput>
    delete?: Enumerable<drinksWhereUniqueInput>
    update?: Enumerable<drinksUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<drinksUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<drinksScalarWhereInput>
  }

  export type drinksCreateNestedOneWithoutImagesInput = {
    create?: XOR<drinksCreateWithoutImagesInput, drinksUncheckedCreateWithoutImagesInput>
    connectOrCreate?: drinksCreateOrConnectWithoutImagesInput
    connect?: drinksWhereUniqueInput
  }

  export type drinksUpdateOneRequiredWithoutImagesInput = {
    create?: XOR<drinksCreateWithoutImagesInput, drinksUncheckedCreateWithoutImagesInput>
    connectOrCreate?: drinksCreateOrConnectWithoutImagesInput
    upsert?: drinksUpsertWithoutImagesInput
    connect?: drinksWhereUniqueInput
    update?: XOR<drinksUpdateWithoutImagesInput, drinksUncheckedUpdateWithoutImagesInput>
  }

  export type drinks_allergiesCreateNestedManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutAllergiesInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutAllergiesInput>
    createMany?: drinks_allergiesCreateManyAllergiesInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
  }

  export type drinks_allergiesUncheckedCreateNestedManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutAllergiesInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutAllergiesInput>
    createMany?: drinks_allergiesCreateManyAllergiesInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
  }

  export type drinks_allergiesUpdateManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutAllergiesInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutAllergiesInput>
    upsert?: Enumerable<drinks_allergiesUpsertWithWhereUniqueWithoutAllergiesInput>
    createMany?: drinks_allergiesCreateManyAllergiesInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
    set?: Enumerable<drinks_allergiesWhereUniqueInput>
    disconnect?: Enumerable<drinks_allergiesWhereUniqueInput>
    delete?: Enumerable<drinks_allergiesWhereUniqueInput>
    update?: Enumerable<drinks_allergiesUpdateWithWhereUniqueWithoutAllergiesInput>
    updateMany?: Enumerable<drinks_allergiesUpdateManyWithWhereWithoutAllergiesInput>
    deleteMany?: Enumerable<drinks_allergiesScalarWhereInput>
  }

  export type drinks_allergiesUncheckedUpdateManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<drinks_allergiesCreateWithoutAllergiesInput>, Enumerable<drinks_allergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<drinks_allergiesCreateOrConnectWithoutAllergiesInput>
    upsert?: Enumerable<drinks_allergiesUpsertWithWhereUniqueWithoutAllergiesInput>
    createMany?: drinks_allergiesCreateManyAllergiesInputEnvelope
    connect?: Enumerable<drinks_allergiesWhereUniqueInput>
    set?: Enumerable<drinks_allergiesWhereUniqueInput>
    disconnect?: Enumerable<drinks_allergiesWhereUniqueInput>
    delete?: Enumerable<drinks_allergiesWhereUniqueInput>
    update?: Enumerable<drinks_allergiesUpdateWithWhereUniqueWithoutAllergiesInput>
    updateMany?: Enumerable<drinks_allergiesUpdateManyWithWhereWithoutAllergiesInput>
    deleteMany?: Enumerable<drinks_allergiesScalarWhereInput>
  }

  export type drinksCreateNestedOneWithoutDrinks_allergiesInput = {
    create?: XOR<drinksCreateWithoutDrinks_allergiesInput, drinksUncheckedCreateWithoutDrinks_allergiesInput>
    connectOrCreate?: drinksCreateOrConnectWithoutDrinks_allergiesInput
    connect?: drinksWhereUniqueInput
  }

  export type allergiesCreateNestedOneWithoutDrinks_allergiesInput = {
    create?: XOR<allergiesCreateWithoutDrinks_allergiesInput, allergiesUncheckedCreateWithoutDrinks_allergiesInput>
    connectOrCreate?: allergiesCreateOrConnectWithoutDrinks_allergiesInput
    connect?: allergiesWhereUniqueInput
  }

  export type drinksUpdateOneRequiredWithoutDrinks_allergiesInput = {
    create?: XOR<drinksCreateWithoutDrinks_allergiesInput, drinksUncheckedCreateWithoutDrinks_allergiesInput>
    connectOrCreate?: drinksCreateOrConnectWithoutDrinks_allergiesInput
    upsert?: drinksUpsertWithoutDrinks_allergiesInput
    connect?: drinksWhereUniqueInput
    update?: XOR<drinksUpdateWithoutDrinks_allergiesInput, drinksUncheckedUpdateWithoutDrinks_allergiesInput>
  }

  export type allergiesUpdateOneRequiredWithoutDrinks_allergiesInput = {
    create?: XOR<allergiesCreateWithoutDrinks_allergiesInput, allergiesUncheckedCreateWithoutDrinks_allergiesInput>
    connectOrCreate?: allergiesCreateOrConnectWithoutDrinks_allergiesInput
    upsert?: allergiesUpsertWithoutDrinks_allergiesInput
    connect?: allergiesWhereUniqueInput
    update?: XOR<allergiesUpdateWithoutDrinks_allergiesInput, allergiesUncheckedUpdateWithoutDrinks_allergiesInput>
  }

  export type drinksCreateNestedOneWithoutNutritionsInput = {
    create?: XOR<drinksCreateWithoutNutritionsInput, drinksUncheckedCreateWithoutNutritionsInput>
    connectOrCreate?: drinksCreateOrConnectWithoutNutritionsInput
    connect?: drinksWhereUniqueInput
  }

  export type drinksUpdateOneRequiredWithoutNutritionsInput = {
    create?: XOR<drinksCreateWithoutNutritionsInput, drinksUncheckedCreateWithoutNutritionsInput>
    connectOrCreate?: drinksCreateOrConnectWithoutNutritionsInput
    upsert?: drinksUpsertWithoutNutritionsInput
    connect?: drinksWhereUniqueInput
    update?: XOR<drinksUpdateWithoutNutritionsInput, drinksUncheckedUpdateWithoutNutritionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type categoriesCreateWithoutDrinksInput = {
    name: string
    description: string
    created_at?: Date | string | null
  }

  export type categoriesUncheckedCreateWithoutDrinksInput = {
    id?: number
    name: string
    description: string
    created_at?: Date | string | null
  }

  export type categoriesCreateOrConnectWithoutDrinksInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutDrinksInput, categoriesUncheckedCreateWithoutDrinksInput>
  }

  export type imagesCreateWithoutDrinksInput = {
    image_url: string
    created_at?: Date | string | null
  }

  export type imagesUncheckedCreateWithoutDrinksInput = {
    id?: number
    image_url: string
    created_at?: Date | string | null
  }

  export type imagesCreateOrConnectWithoutDrinksInput = {
    where: imagesWhereUniqueInput
    create: XOR<imagesCreateWithoutDrinksInput, imagesUncheckedCreateWithoutDrinksInput>
  }

  export type imagesCreateManyDrinksInputEnvelope = {
    data: Enumerable<imagesCreateManyDrinksInput>
    skipDuplicates?: boolean
  }

  export type drinks_allergiesCreateWithoutDrinksInput = {
    created_at?: Date | string | null
    allergies: allergiesCreateNestedOneWithoutDrinks_allergiesInput
  }

  export type drinks_allergiesUncheckedCreateWithoutDrinksInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type drinks_allergiesCreateOrConnectWithoutDrinksInput = {
    where: drinks_allergiesWhereUniqueInput
    create: XOR<drinks_allergiesCreateWithoutDrinksInput, drinks_allergiesUncheckedCreateWithoutDrinksInput>
  }

  export type drinks_allergiesCreateManyDrinksInputEnvelope = {
    data: Enumerable<drinks_allergiesCreateManyDrinksInput>
    skipDuplicates?: boolean
  }

  export type nutritionsCreateWithoutDrinksInput = {
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    created_at?: Date | string | null
  }

  export type nutritionsUncheckedCreateWithoutDrinksInput = {
    id?: number
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    created_at?: Date | string | null
  }

  export type nutritionsCreateOrConnectWithoutDrinksInput = {
    where: nutritionsWhereUniqueInput
    create: XOR<nutritionsCreateWithoutDrinksInput, nutritionsUncheckedCreateWithoutDrinksInput>
  }

  export type nutritionsCreateManyDrinksInputEnvelope = {
    data: Enumerable<nutritionsCreateManyDrinksInput>
    skipDuplicates?: boolean
  }

  export type categoriesUpsertWithoutDrinksInput = {
    update: XOR<categoriesUpdateWithoutDrinksInput, categoriesUncheckedUpdateWithoutDrinksInput>
    create: XOR<categoriesCreateWithoutDrinksInput, categoriesUncheckedCreateWithoutDrinksInput>
  }

  export type categoriesUpdateWithoutDrinksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesUncheckedUpdateWithoutDrinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type imagesUpsertWithWhereUniqueWithoutDrinksInput = {
    where: imagesWhereUniqueInput
    update: XOR<imagesUpdateWithoutDrinksInput, imagesUncheckedUpdateWithoutDrinksInput>
    create: XOR<imagesCreateWithoutDrinksInput, imagesUncheckedCreateWithoutDrinksInput>
  }

  export type imagesUpdateWithWhereUniqueWithoutDrinksInput = {
    where: imagesWhereUniqueInput
    data: XOR<imagesUpdateWithoutDrinksInput, imagesUncheckedUpdateWithoutDrinksInput>
  }

  export type imagesUpdateManyWithWhereWithoutDrinksInput = {
    where: imagesScalarWhereInput
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyWithoutImagesInput>
  }

  export type imagesScalarWhereInput = {
    AND?: Enumerable<imagesScalarWhereInput>
    OR?: Enumerable<imagesScalarWhereInput>
    NOT?: Enumerable<imagesScalarWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    image_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type drinks_allergiesUpsertWithWhereUniqueWithoutDrinksInput = {
    where: drinks_allergiesWhereUniqueInput
    update: XOR<drinks_allergiesUpdateWithoutDrinksInput, drinks_allergiesUncheckedUpdateWithoutDrinksInput>
    create: XOR<drinks_allergiesCreateWithoutDrinksInput, drinks_allergiesUncheckedCreateWithoutDrinksInput>
  }

  export type drinks_allergiesUpdateWithWhereUniqueWithoutDrinksInput = {
    where: drinks_allergiesWhereUniqueInput
    data: XOR<drinks_allergiesUpdateWithoutDrinksInput, drinks_allergiesUncheckedUpdateWithoutDrinksInput>
  }

  export type drinks_allergiesUpdateManyWithWhereWithoutDrinksInput = {
    where: drinks_allergiesScalarWhereInput
    data: XOR<drinks_allergiesUpdateManyMutationInput, drinks_allergiesUncheckedUpdateManyWithoutDrinks_allergiesInput>
  }

  export type drinks_allergiesScalarWhereInput = {
    AND?: Enumerable<drinks_allergiesScalarWhereInput>
    OR?: Enumerable<drinks_allergiesScalarWhereInput>
    NOT?: Enumerable<drinks_allergiesScalarWhereInput>
    id?: IntFilter | number
    drink_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type nutritionsUpsertWithWhereUniqueWithoutDrinksInput = {
    where: nutritionsWhereUniqueInput
    update: XOR<nutritionsUpdateWithoutDrinksInput, nutritionsUncheckedUpdateWithoutDrinksInput>
    create: XOR<nutritionsCreateWithoutDrinksInput, nutritionsUncheckedCreateWithoutDrinksInput>
  }

  export type nutritionsUpdateWithWhereUniqueWithoutDrinksInput = {
    where: nutritionsWhereUniqueInput
    data: XOR<nutritionsUpdateWithoutDrinksInput, nutritionsUncheckedUpdateWithoutDrinksInput>
  }

  export type nutritionsUpdateManyWithWhereWithoutDrinksInput = {
    where: nutritionsScalarWhereInput
    data: XOR<nutritionsUpdateManyMutationInput, nutritionsUncheckedUpdateManyWithoutNutritionsInput>
  }

  export type nutritionsScalarWhereInput = {
    AND?: Enumerable<nutritionsScalarWhereInput>
    OR?: Enumerable<nutritionsScalarWhereInput>
    NOT?: Enumerable<nutritionsScalarWhereInput>
    id?: IntFilter | number
    calories?: StringFilter | string
    sodium?: StringFilter | string
    fat?: StringFilter | string
    sugar?: StringFilter | string
    protein?: StringFilter | string
    caffein?: StringFilter | string
    nutrition_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type drinksCreateWithoutCategoriesInput = {
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
    images?: imagesCreateNestedManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsCreateNestedManyWithoutDrinksInput
  }

  export type drinksUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
    images?: imagesUncheckedCreateNestedManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUncheckedCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutDrinksInput
  }

  export type drinksCreateOrConnectWithoutCategoriesInput = {
    where: drinksWhereUniqueInput
    create: XOR<drinksCreateWithoutCategoriesInput, drinksUncheckedCreateWithoutCategoriesInput>
  }

  export type drinksCreateManyCategoriesInputEnvelope = {
    data: Enumerable<drinksCreateManyCategoriesInput>
    skipDuplicates?: boolean
  }

  export type drinksUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: drinksWhereUniqueInput
    update: XOR<drinksUpdateWithoutCategoriesInput, drinksUncheckedUpdateWithoutCategoriesInput>
    create: XOR<drinksCreateWithoutCategoriesInput, drinksUncheckedCreateWithoutCategoriesInput>
  }

  export type drinksUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: drinksWhereUniqueInput
    data: XOR<drinksUpdateWithoutCategoriesInput, drinksUncheckedUpdateWithoutCategoriesInput>
  }

  export type drinksUpdateManyWithWhereWithoutCategoriesInput = {
    where: drinksScalarWhereInput
    data: XOR<drinksUpdateManyMutationInput, drinksUncheckedUpdateManyWithoutDrinksInput>
  }

  export type drinksScalarWhereInput = {
    AND?: Enumerable<drinksScalarWhereInput>
    OR?: Enumerable<drinksScalarWhereInput>
    NOT?: Enumerable<drinksScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    category_id?: IntFilter | number
    description?: StringFilter | string
    is_new?: BoolFilter | boolean
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type drinksCreateWithoutImagesInput = {
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
    categories: categoriesCreateNestedOneWithoutDrinksInput
    drinks_allergies?: drinks_allergiesCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsCreateNestedManyWithoutDrinksInput
  }

  export type drinksUncheckedCreateWithoutImagesInput = {
    id?: number
    name: string
    category_id: number
    description: string
    is_new: boolean
    created_at?: Date | string | null
    drinks_allergies?: drinks_allergiesUncheckedCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutDrinksInput
  }

  export type drinksCreateOrConnectWithoutImagesInput = {
    where: drinksWhereUniqueInput
    create: XOR<drinksCreateWithoutImagesInput, drinksUncheckedCreateWithoutImagesInput>
  }

  export type drinksUpsertWithoutImagesInput = {
    update: XOR<drinksUpdateWithoutImagesInput, drinksUncheckedUpdateWithoutImagesInput>
    create: XOR<drinksCreateWithoutImagesInput, drinksUncheckedCreateWithoutImagesInput>
  }

  export type drinksUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: categoriesUpdateOneRequiredWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUpdateManyWithoutDrinksInput
  }

  export type drinksUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks_allergies?: drinks_allergiesUncheckedUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutDrinksInput
  }

  export type drinks_allergiesCreateWithoutAllergiesInput = {
    created_at?: Date | string | null
    drinks: drinksCreateNestedOneWithoutDrinks_allergiesInput
  }

  export type drinks_allergiesUncheckedCreateWithoutAllergiesInput = {
    id?: number
    drink_id: number
    created_at?: Date | string | null
  }

  export type drinks_allergiesCreateOrConnectWithoutAllergiesInput = {
    where: drinks_allergiesWhereUniqueInput
    create: XOR<drinks_allergiesCreateWithoutAllergiesInput, drinks_allergiesUncheckedCreateWithoutAllergiesInput>
  }

  export type drinks_allergiesCreateManyAllergiesInputEnvelope = {
    data: Enumerable<drinks_allergiesCreateManyAllergiesInput>
    skipDuplicates?: boolean
  }

  export type drinks_allergiesUpsertWithWhereUniqueWithoutAllergiesInput = {
    where: drinks_allergiesWhereUniqueInput
    update: XOR<drinks_allergiesUpdateWithoutAllergiesInput, drinks_allergiesUncheckedUpdateWithoutAllergiesInput>
    create: XOR<drinks_allergiesCreateWithoutAllergiesInput, drinks_allergiesUncheckedCreateWithoutAllergiesInput>
  }

  export type drinks_allergiesUpdateWithWhereUniqueWithoutAllergiesInput = {
    where: drinks_allergiesWhereUniqueInput
    data: XOR<drinks_allergiesUpdateWithoutAllergiesInput, drinks_allergiesUncheckedUpdateWithoutAllergiesInput>
  }

  export type drinks_allergiesUpdateManyWithWhereWithoutAllergiesInput = {
    where: drinks_allergiesScalarWhereInput
    data: XOR<drinks_allergiesUpdateManyMutationInput, drinks_allergiesUncheckedUpdateManyWithoutDrinks_allergiesInput>
  }

  export type drinksCreateWithoutDrinks_allergiesInput = {
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
    categories: categoriesCreateNestedOneWithoutDrinksInput
    images?: imagesCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsCreateNestedManyWithoutDrinksInput
  }

  export type drinksUncheckedCreateWithoutDrinks_allergiesInput = {
    id?: number
    name: string
    category_id: number
    description: string
    is_new: boolean
    created_at?: Date | string | null
    images?: imagesUncheckedCreateNestedManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutDrinksInput
  }

  export type drinksCreateOrConnectWithoutDrinks_allergiesInput = {
    where: drinksWhereUniqueInput
    create: XOR<drinksCreateWithoutDrinks_allergiesInput, drinksUncheckedCreateWithoutDrinks_allergiesInput>
  }

  export type allergiesCreateWithoutDrinks_allergiesInput = {
    allergy: string
    created_at?: Date | string | null
  }

  export type allergiesUncheckedCreateWithoutDrinks_allergiesInput = {
    id?: number
    allergy: string
    created_at?: Date | string | null
  }

  export type allergiesCreateOrConnectWithoutDrinks_allergiesInput = {
    where: allergiesWhereUniqueInput
    create: XOR<allergiesCreateWithoutDrinks_allergiesInput, allergiesUncheckedCreateWithoutDrinks_allergiesInput>
  }

  export type drinksUpsertWithoutDrinks_allergiesInput = {
    update: XOR<drinksUpdateWithoutDrinks_allergiesInput, drinksUncheckedUpdateWithoutDrinks_allergiesInput>
    create: XOR<drinksCreateWithoutDrinks_allergiesInput, drinksUncheckedCreateWithoutDrinks_allergiesInput>
  }

  export type drinksUpdateWithoutDrinks_allergiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: categoriesUpdateOneRequiredWithoutDrinksInput
    images?: imagesUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUpdateManyWithoutDrinksInput
  }

  export type drinksUncheckedUpdateWithoutDrinks_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    images?: imagesUncheckedUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutDrinksInput
  }

  export type allergiesUpsertWithoutDrinks_allergiesInput = {
    update: XOR<allergiesUpdateWithoutDrinks_allergiesInput, allergiesUncheckedUpdateWithoutDrinks_allergiesInput>
    create: XOR<allergiesCreateWithoutDrinks_allergiesInput, allergiesUncheckedCreateWithoutDrinks_allergiesInput>
  }

  export type allergiesUpdateWithoutDrinks_allergiesInput = {
    allergy?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergiesUncheckedUpdateWithoutDrinks_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinksCreateWithoutNutritionsInput = {
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
    categories: categoriesCreateNestedOneWithoutDrinksInput
    images?: imagesCreateNestedManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesCreateNestedManyWithoutDrinksInput
  }

  export type drinksUncheckedCreateWithoutNutritionsInput = {
    id?: number
    name: string
    category_id: number
    description: string
    is_new: boolean
    created_at?: Date | string | null
    images?: imagesUncheckedCreateNestedManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUncheckedCreateNestedManyWithoutDrinksInput
  }

  export type drinksCreateOrConnectWithoutNutritionsInput = {
    where: drinksWhereUniqueInput
    create: XOR<drinksCreateWithoutNutritionsInput, drinksUncheckedCreateWithoutNutritionsInput>
  }

  export type drinksUpsertWithoutNutritionsInput = {
    update: XOR<drinksUpdateWithoutNutritionsInput, drinksUncheckedUpdateWithoutNutritionsInput>
    create: XOR<drinksCreateWithoutNutritionsInput, drinksUncheckedCreateWithoutNutritionsInput>
  }

  export type drinksUpdateWithoutNutritionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: categoriesUpdateOneRequiredWithoutDrinksInput
    images?: imagesUpdateManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUpdateManyWithoutDrinksInput
  }

  export type drinksUncheckedUpdateWithoutNutritionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    images?: imagesUncheckedUpdateManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUncheckedUpdateManyWithoutDrinksInput
  }

  export type imagesCreateManyDrinksInput = {
    id?: number
    image_url: string
    created_at?: Date | string | null
  }

  export type drinks_allergiesCreateManyDrinksInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type nutritionsCreateManyDrinksInput = {
    id?: number
    calories: string
    sodium: string
    fat: string
    sugar: string
    protein: string
    caffein: string
    created_at?: Date | string | null
  }

  export type imagesUpdateWithoutDrinksInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type imagesUncheckedUpdateWithoutDrinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type imagesUncheckedUpdateManyWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinks_allergiesUpdateWithoutDrinksInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: allergiesUpdateOneRequiredWithoutDrinks_allergiesInput
  }

  export type drinks_allergiesUncheckedUpdateWithoutDrinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinks_allergiesUncheckedUpdateManyWithoutDrinks_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsUpdateWithoutDrinksInput = {
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsUncheckedUpdateWithoutDrinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsUncheckedUpdateManyWithoutNutritionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    calories?: StringFieldUpdateOperationsInput | string
    sodium?: StringFieldUpdateOperationsInput | string
    fat?: StringFieldUpdateOperationsInput | string
    sugar?: StringFieldUpdateOperationsInput | string
    protein?: StringFieldUpdateOperationsInput | string
    caffein?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinksCreateManyCategoriesInput = {
    id?: number
    name: string
    description: string
    is_new: boolean
    created_at?: Date | string | null
  }

  export type drinksUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    images?: imagesUpdateManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUpdateManyWithoutDrinksInput
  }

  export type drinksUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    images?: imagesUncheckedUpdateManyWithoutDrinksInput
    drinks_allergies?: drinks_allergiesUncheckedUpdateManyWithoutDrinksInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutDrinksInput
  }

  export type drinksUncheckedUpdateManyWithoutDrinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_new?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drinks_allergiesCreateManyAllergiesInput = {
    id?: number
    drink_id: number
    created_at?: Date | string | null
  }

  export type drinks_allergiesUpdateWithoutAllergiesInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drinks?: drinksUpdateOneRequiredWithoutDrinks_allergiesInput
  }

  export type drinks_allergiesUncheckedUpdateWithoutAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    drink_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}