
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.25.0
 * Query Engine version: c838e79f39885bc8e1611849b1eb28b5bb5bc922
 */
Prisma.prismaVersion = {
  client: "2.25.0",
  engine: "c838e79f39885bc8e1611849b1eb28b5bb5bc922"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.DrinksScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  description: 'description',
  is_new: 'is_new',
  created_at: 'created_at'
});

exports.Prisma.CategoriesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
});

exports.Prisma.ImagesScalarFieldEnum = makeEnum({
  id: 'id',
  image_url: 'image_url',
  image_id: 'image_id',
  created_at: 'created_at'
});

exports.Prisma.AllergiesScalarFieldEnum = makeEnum({
  id: 'id',
  allergy: 'allergy',
  created_at: 'created_at'
});

exports.Prisma.Drinks_allergiesScalarFieldEnum = makeEnum({
  id: 'id',
  drink_id: 'drink_id',
  allergy_id: 'allergy_id',
  created_at: 'created_at'
});

exports.Prisma.NutritionsScalarFieldEnum = makeEnum({
  id: 'id',
  calories: 'calories',
  sodium: 'sodium',
  fat: 'fat',
  sugar: 'sugar',
  protein: 'protein',
  caffein: 'caffein',
  nutrition_id: 'nutrition_id',
  created_at: 'created_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  drinks: 'drinks',
  categories: 'categories',
  images: 'images',
  allergies: 'allergies',
  drinks_allergies: 'drinks_allergies',
  nutritions: 'nutritions'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
